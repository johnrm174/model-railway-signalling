#-----------------------------------------------------------------------------------
# Basic interlocking and route setting system tests
#
# When run as 'main' it uses the following example schematic files:
#     "../configuration_examples/interlocking_colour_light_example.sig"
#     "../configuration_examples/interlocking_semaphore_example.sig"
#
# Individual modules are also reused for the automation and approach control tests
#-----------------------------------------------------------------------------------

from system_test_harness import *

#-----------------------------------------------------------------------------------

def run_initial_colour_light_state_tests():
    print("Colour Light Initial state tests")
    assert_signals_route_MAIN(1,3,4,5,6,7,8,9,10,11,12,13,14,15)
    assert_signals_route_LH1(2)
    assert_signals_DANGER(1,3,4,5,6,7,8,9,10,11,12,13,14,15)
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,4,5,6,7,8,9,10,11,12,13,15)
    assert_signals_locked(2,14)
    assert_subsidaries_unlocked(1,2,3)
    return()

#-----------------------------------------------------------------------------------

def run_initial_semaphore_state_tests():
    print("Semaphore Initial state tests")
    assert_signals_route_MAIN(1,3,4,5,6,7,8,9,10,12,13,14,15,16)
    assert_signals_route_LH1(2)
    assert_signals_DANGER(1,3,4,5,6,7,8,10,12,13,14,15)
    assert_signals_CAUTION(9,16)
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,4,5,6,7,8,10,12,13,15)
    assert_signals_locked(2,14,9,16)
    assert_subsidaries_unlocked(1,2,3)
    return()

#-----------------------------------------------------------------------------------

def run_signal_route_tests():
    print("Common Signal Route tests")
    # Test the default route states
    # There is no route for signal 14 in the 'default' state
    assert_signals_route_MAIN(1,5,6,7,13)
    assert_signals_route_LH1(2)
    # Signals 1 and 6
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    assert_signals_route_LH1(1,6)
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    assert_signals_route_MAIN(1,6)
    assert_signals_app_cntl_clear(1)
    # Signal 2, Signal 13 and Signal 14
    # Note that for Signal 2, MAIN is for the main line and LH1 is the siding
    # Note that for Signal 14, MAIN is for the crossover (no route back along main line)
    assert_signals_route_LH1(2)
    assert_signals_route_MAIN(13)
    # There is "no route" for signal 14
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    assert_signals_route_MAIN(2)
    assert_signals_route_RH1(13)
    # There is "no route" for signal 14
    set_points_switched(5)
    assert_signals_route_LH1(13)
    assert_signals_route_MAIN(14)
    set_points_normal(5)
    assert_signals_route_MAIN(2)
    assert_signals_route_RH1(13)
    # There is "no route" for signal 14
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    # Test everything has returned to the default state
    # There is "no route" for signal 14
    assert_signals_route_MAIN(1,5,6,7,13)
    assert_signals_route_LH1(2)
    return()

#-----------------------------------------------------------------------------------

def run_colour_light_aspect_tests():
    print("Colour Light Aspect tests")
    # Test the default state
    assert_signals_DANGER(8,1,2,3,4,9,12,10,11)
    # Main Route 1
    set_signals_off(8,1,3,4)
    assert_signals_PROCEED(8,1,3,4)
    set_signals_on(4)
    assert_signals_DANGER(4)
    assert_signals_CAUTION(3)
    assert_signals_PRELIM_CAUTION(1)
    assert_signals_PROCEED(8)
    set_signals_on(3)
    assert_signals_DANGER(3)
    assert_signals_CAUTION(1)
    assert_signals_PRELIM_CAUTION(8)
    set_signals_on(1)
    assert_signals_DANGER(1)
    assert_signals_CAUTION(8)
    set_signals_on(8)
    assert_signals_DANGER(8,1,3,4)
    # Main Route Loop
    set_fpls_off(2,3)
    set_points_switched(2,3)
    set_fpls_on(2,3)
    assert_signals_DANGER(8,1,3,4)
    set_signals_off(8,1,2,4)
    assert_signals_PROCEED(8,1,2,4)
    set_signals_on(4)
    assert_signals_DANGER(4)
    assert_signals_CAUTION(2)
    assert_signals_PRELIM_CAUTION(1)
    assert_signals_PROCEED(8)
    set_signals_on(2)
    assert_signals_DANGER(2)
    assert_signals_CAUTION(1)
    assert_signals_PRELIM_CAUTION(8)
    set_signals_on(1)
    assert_signals_DANGER(1)
    assert_signals_CAUTION(8)
    set_signals_on(8)
    assert_signals_DANGER(8,1,3,4)
    # Switch points back to main line
    set_fpls_off(2,3)
    set_points_normal(2,3)
    set_fpls_on(2,3)
    # Main Route 2
    assert_signals_DANGER(9,12,10,11)
    set_signals_off(9,12,10,11)
    assert_signals_PROCEED(9,12,10,11)
    set_signals_on(11)
    assert_signals_DANGER(11)
    assert_signals_CAUTION(10)
    assert_signals_PRELIM_CAUTION(12)
    assert_signals_PROCEED(9)
    set_signals_on(10)
    assert_signals_DANGER(10)
    assert_signals_CAUTION(12)
    assert_signals_PRELIM_CAUTION(9)
    set_signals_on(12)
    assert_signals_DANGER(12)
    assert_signals_CAUTION(9)
    set_signals_on(9)
    # Test everything has returned to the default state
    assert_signals_DANGER(8,1,2,3,4,9,12,10,11)
    return()

#-----------------------------------------------------------------------------------

def run_semaphore_aspect_tests():
    print("Semaphore Aspect tests")
    # Test the default state
    assert_signals_DANGER(8,1,2,3,4,80,12,10)
    assert_signals_CAUTION(16,104,9)
    # Main Route 1
    # Set the home signals 'off' first, followed by the distant signals
    set_signals_off(8,1,3,4,80)
    # Signal 104 is the distant associated with signal 4)
    set_signals_off(16,104)
    assert_signals_PROCEED(16,8,1,3,4,80)
    set_signals_on(104)
    assert_signals_CAUTION(4)
    set_signals_on(16,8,1,3,4,104,80)
    assert_signals_DANGER(8,1,3,4,80)
    assert_signals_CAUTION(16)
    # Main Route Loop
    set_fpls_off(2,3)
    set_points_switched(2,3)
    set_fpls_on(2,3)
    # Set the home signals 'off' first, followed by the distant signals
    set_signals_off(8,1,2,4,80)
    #Signal 104 is the distant associated with signal 4)
    set_signals_off(16,104)
    assert_signals_PROCEED(16,8,1,2,4,80)
    set_signals_on(104)
    assert_signals_CAUTION(4)
    set_signals_on(16,8,1,2,4,104,80)
    assert_signals_DANGER(8,1,2,4,80)
    assert_signals_CAUTION(16)
    # Switch points back to main line
    set_fpls_off(2,3)
    set_points_normal(2,3)
    set_fpls_on(2,3)
    # Main Route 2
    # Set the home signals 'off' first, followed by the distant signals
    set_signals_off(10,12)
    set_signals_off(9)
    assert_signals_PROCEED(9,12,10)
    set_signals_on(9,12,10)
    # Test everything has returned to the default state
    assert_signals_DANGER(8,1,2,3,4,80,12,10)
    assert_signals_CAUTION(16,104,9)
    return()

#-----------------------------------------------------------------------------------

def run_point_interlocking_tests():
    print("Common Point Interlocking Tests")
    # Test the default state
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,5,6,7,12,13,15)
    assert_signals_locked(2,14)
    assert_subsidaries_unlocked(1,2,3)
    # Point 2 - Test interlocking when normal
    set_fpls_off(2)
    assert_signals_locked(1,5,6,15)
    assert_subsidaries_locked(1)
    set_fpls_on(2)
    assert_signals_unlocked(1,5,6,15)
    assert_subsidaries_unlocked(1)
    # Point 2 - Test interlocking when switched
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    assert_signals_unlocked(1,6)
    assert_signals_locked(5,15)
    assert_subsidaries_unlocked(1)
    # Point 2 - Test interlocking when returned to normal
    set_fpls_off(2)
    assert_signals_locked(1,5,6,15)
    assert_subsidaries_locked(1)
    set_points_normal(2)
    set_fpls_on(2)
    assert_signals_unlocked(1,5,6,15)
    assert_subsidaries_unlocked(1)
    # Point 3 - Test interlocking when normal
    assert_signals_unlocked(3,7,13)
    assert_subsidaries_unlocked(2,3)
    assert_signals_locked(2)
    set_fpls_off(3)
    assert_signals_locked(2,3,7,13)
    assert_subsidaries_locked(2,3)
    set_fpls_on(3)
    assert_signals_unlocked(3,7,13)
    assert_subsidaries_unlocked(2,3)
    assert_signals_locked(2)
    # Test effect of Point 5 (different signals interlocked)
    assert_signals_locked(14)
    assert_signals_unlocked(12,3,13)
    assert_subsidaries_unlocked(3)
    set_points_switched(5)
    assert_signals_locked(3,12)
    assert_signals_unlocked(13,14)
    assert_subsidaries_locked(3)
    set_points_normal(5)
    assert_signals_locked(14)
    assert_signals_unlocked(12,3,13)
    assert_subsidaries_unlocked(3)
    # Point 3 - Test interlocking when switched
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    assert_signals_unlocked(2,13)
    assert_signals_locked(3,7)
    assert_subsidaries_unlocked(2)
    assert_subsidaries_locked(3)
    # Test effect of Point 5 (different signals interlocked)
    assert_signals_locked(14)
    assert_signals_unlocked(12,2,13)
    assert_subsidaries_unlocked(2)
    set_points_switched(5)
    assert_signals_locked(2,12)
    assert_signals_unlocked(13,14)
    assert_subsidaries_locked(2)
    set_points_normal(5)
    assert_signals_locked(14)
    assert_signals_unlocked(12,2,13)
    assert_subsidaries_unlocked(2)
    # Point 2 - Test interlocking when returned to normal
    set_fpls_off(3)
    assert_signals_locked(2,3,7,13)
    assert_subsidaries_locked(2,3)
    set_points_normal(3)
    set_fpls_on(3)
    assert_signals_unlocked(3,7,13)
    assert_signals_locked(2)
    assert_subsidaries_unlocked(2,3)
    # Point 3 - Test interlocking when normal
    assert_signals_unlocked(3,13,12)
    assert_signals_locked(14)
    assert_subsidaries_unlocked(3)
    # Point 3 - Test interlocking when switched
    set_points_switched(5)
    assert_signals_unlocked(13,14)
    assert_signals_locked(3,12)
    assert_subsidaries_locked(3)
    # Point 2 - Test interlocking when returned to normal
    set_points_normal(5)
    # Test everything has been returned to the default state
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,5,6,7,12,13,15)
    assert_signals_locked(2,14)
    assert_subsidaries_unlocked(1,2,3)
    return()

#-----------------------------------------------------------------------------------

def run_signal_interlocking_tests():
    print("Common Signal Interlocking Tests")
    # Test the default state
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,5,6,7,12,13,15)
    assert_signals_locked(2,14)
    assert_subsidaries_unlocked(1,2,3)
    # Test signal 8 interlocking
    set_signals_off(8)
    assert_signals_locked(15)
    set_signals_on(8)
    assert_signals_unlocked(15)
    # Test effect of point 2 (different signals interlocked)
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    set_signals_off(8)
    assert_signals_locked(6)
    set_signals_on(8)
    assert_signals_unlocked(6)
    # Return point 2 to normal
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    # Test signal 1 interlocking - main line
    set_signals_off(1)
    assert_signals_locked(13,15)
    assert_subsidaries_locked(1)
    assert_points_locked(2)
    set_signals_on(1)
    assert_signals_unlocked(13,15)
    assert_subsidaries_unlocked(1)
    assert_points_unlocked(1)
    set_subsidaries_off(1)
    assert_signals_locked(1,13,15)
    assert_points_locked(2)
    set_subsidaries_on(1)
    assert_signals_unlocked(1,13,15)
    assert_points_unlocked(1)
    # Test signals 1 interlocking on loop line
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    set_signals_off(1)
    assert_signals_locked(6,7)
    assert_points_locked(2)
    set_signals_on(1)
    set_subsidaries_off(1)
    assert_signals_locked(6,7)
    assert_points_locked(2)
    set_subsidaries_on(1)
    assert_signals_unlocked(6,7)
    assert_points_unlocked(1)
    # Test effect of point 3 (different interlocked signals)
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    set_signals_off(1)
    assert_signals_locked(6,13)
    set_signals_on(1)
    assert_signals_unlocked(6,13)
    set_subsidaries_off(1)
    assert_signals_locked(6,13)
    set_subsidaries_on(1)
    assert_signals_unlocked(6,13)
    assert_points_unlocked(1)
    # Set Points 2 and 3 back to their default states
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    # Test signal 15 interlocking
    set_signals_off(15)
    assert_signals_locked(1,8)
    assert_subsidaries_locked(1)
    assert_points_locked(2)
    set_signals_on(15)
    assert_signals_unlocked(1,8)
    assert_subsidaries_unlocked(1)
    assert_points_unlocked(2)
    # Test Signal 3 interlocking
    set_signals_off(3)
    assert_signals_locked(13)
    assert_subsidaries_locked(3)
    assert_points_locked(3,5)
    set_signals_on(3)
    assert_signals_unlocked(13)
    assert_subsidaries_unlocked(3)
    assert_points_unlocked(2)
    set_subsidaries_off(3)
    assert_signals_locked(13,3)
    assert_points_locked(3,5)
    set_subsidaries_on(3)
    assert_signals_unlocked(13,3)
    assert_points_unlocked(3,5)
    # Test Signal 13 interlocking for MAIN route
    set_signals_off(13)
    assert_signals_locked(1,3)
    assert_subsidaries_locked(1,3)
    assert_points_locked(3,5)
    set_signals_on(13)
    assert_signals_unlocked(1,3)
    assert_subsidaries_unlocked(1,3)
    assert_points_unlocked(3,5)
    # Test Signal 13 interlocking for LH1 route
    set_points_switched(5)
    set_signals_off(13)
    assert_signals_locked(14)
    assert_points_locked(5)
    set_signals_on(13)
    assert_signals_unlocked(14)
    assert_points_unlocked(5)
    set_points_normal(5)
    # Test Signal 13 interlocking for RH1 route
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    set_signals_off(13)
    assert_signals_locked(2,5)
    assert_subsidaries_locked(2)
    assert_points_locked(3,5)
    set_signals_on(13)
    assert_signals_unlocked(2,5)
    assert_subsidaries_unlocked(2)
    assert_points_unlocked(3,5)
    # Test effect of point 2 (different interlocked signals)
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    set_signals_off(13)
    assert_signals_locked(2,1)
    assert_subsidaries_locked(2,1)
    assert_points_locked(3,5)
    set_signals_on(13)
    assert_signals_unlocked(2,1)
    assert_subsidaries_unlocked(2,1)
    assert_points_unlocked(3,5)
    # Set Points 2 and 3 back to their default states
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    # Test Signal 5 interlocking
    set_signals_off(5)
    assert_signals_locked(6,7)
    assert_points_locked(2)
    set_signals_on(5)
    assert_signals_unlocked(6,7)
    assert_points_unlocked(2)
    # Test effect of point 3 (different interlocked signals)
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    set_signals_off(5)
    assert_signals_locked(6,13)
    assert_points_locked(2)
    set_signals_on(5)
    assert_signals_unlocked(6,13)
    assert_points_unlocked(2)
    # Set Point 3 back to its default state
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    # Test Signal 6 interlocking
    set_signals_off(6)
    assert_signals_locked(5)
    assert_points_locked(2)
    set_signals_on(6)
    assert_signals_unlocked(5)
    assert_points_unlocked(2)
    # Test effect of point 2 (different interlocked signals)
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    set_signals_off(6)
    assert_signals_locked(1,8)
    assert_subsidaries_locked(1)
    assert_points_locked(2)
    set_signals_on(6)
    assert_signals_unlocked(1,8)
    assert_subsidaries_unlocked(1)
    assert_points_unlocked(2)
    # Set Point 2 back to its default state
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    # Test signal 7 interlocking
    # Note that signal 2 is always locked when point 3 is normal
    set_signals_off(7)
    assert_signals_locked(2,5)
    assert_subsidaries_locked(2)
    assert_points_locked(3)
    set_signals_on(7)
    assert_signals_locked(2)
    assert_signals_unlocked(5)
    assert_subsidaries_unlocked(1)
    assert_points_unlocked(3)
    # Test effect of point 2 (different interlocked signals)
    # Note that signal 2 should always be locked unless route is set for MAIN
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    set_signals_off(7)
    assert_signals_locked(2,1)
    assert_subsidaries_locked(2,1)
    assert_points_locked(3)
    set_signals_on(7)
    assert_signals_locked(2)
    assert_signals_unlocked(1)
    assert_subsidaries_unlocked(2,1)
    assert_points_unlocked(3)
    # Set Point 2 back to its default state
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    # Test Signal 2 interlocking
    # Note that main signal is only for the MAIN route (not the siding)
    assert_signals_locked(2)
    set_subsidaries_off(2)
    assert_signals_locked(7)
    assert_points_locked(3)
    set_subsidaries_on(2)
    assert_signals_unlocked(7)
    assert_points_unlocked(3)
    # Test Signal 2 interlocking for LH1 route
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    set_signals_off(2)
    assert_signals_locked(13)
    assert_points_locked(3)
    set_signals_on(2)
    assert_signals_unlocked(13)
    assert_points_unlocked(3)
    set_subsidaries_off(2)
    assert_signals_locked(13)
    assert_points_locked(3)
    set_subsidaries_on(2)
    assert_signals_unlocked(13)
    assert_points_unlocked(3)
    # Set Point 3 back to its default state
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    # Test Signal 12 interlocking
    # Note that signal 14 should always be locked for this test
    set_signals_off(12)
    assert_signals_locked(14)
    assert_points_locked(5)
    set_signals_on(12)
    assert_signals_locked(14)
    assert_points_unlocked(5)
    # Test Signal 14 interlocking
    # Note this can only be cleared for the crossover
    assert_signals_locked(14)
    set_points_switched(5)
    set_signals_off(14)
    assert_signals_locked(13)
    assert_points_locked(5)
    set_signals_on(14)
    assert_signals_unlocked(13)
    assert_points_unlocked(5)
    set_points_normal(5)
    # Test everything has been returned to the default state
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,5,6,7,12,13,15)
    assert_signals_locked(2,14)
    assert_subsidaries_unlocked(1,2,3)
    return()

#-----------------------------------------------------------------------------------

def run_semaphore_interlock_ahead_tests():
    print("Semaphore Interlock on signals ahead Tests")
    # Test the default state
    assert_signals_locked(16,104,9)
    # Main line 1
    assert_signals_locked(16)
    set_signals_off(8)
    assert_signals_locked(16)
    set_signals_off(1)
    assert_signals_locked(16)
    set_signals_off(3)
    assert_signals_locked(16)
    set_signals_off(4)
    assert_signals_unlocked(16)
    set_signals_off(16)
    assert_signals_locked(104)
    set_signals_off(80)
    assert_signals_unlocked(104)
    set_signals_off(104)
    set_signals_on(8,1,3,4,80)
    assert_signals_unlocked(16,104)
    set_signals_on(16,104)
    assert_signals_locked(16,104)
    # Main Line Loop
    set_fpls_off(2,3)
    set_points_switched(2,3)
    set_fpls_on(2,3)
    assert_signals_locked(16)
    set_signals_off(8)
    assert_signals_locked(16)
    set_signals_off(1)
    assert_signals_locked(16)
    set_signals_off(2)
    assert_signals_locked(16)
    set_signals_off(4)
    assert_signals_unlocked(16)
    set_signals_off(16)
    assert_signals_locked(104)
    set_signals_off(80)
    assert_signals_unlocked(104)
    set_signals_off(104)
    set_signals_on(8,1,2,4,80)
    assert_signals_unlocked(16,104)
    set_signals_on(16,104)
    assert_signals_locked(16,104)
    set_fpls_off(2,3)
    set_points_normal(2,3)
    set_fpls_on(2,3)
    # Main Line 2
    assert_signals_locked(9)
    set_signals_off(10)
    assert_signals_locked(16)
    set_signals_off(12)
    assert_signals_unlocked(9)
    set_signals_off(9)
    set_signals_on(12,10)
    assert_signals_unlocked(9)
    set_signals_on(9)
    assert_signals_locked(9)    
    # Test the default state
    assert_signals_locked(16,104,9)
    return()

######################################################################################################

def run_all_interlocking_tests():
    initialise_test_harness(filename="../configuration_examples/interlocking_colour_light_example.sig")
    run_initial_colour_light_state_tests()
    run_signal_route_tests()
    run_colour_light_aspect_tests()
    run_point_interlocking_tests()
    run_signal_interlocking_tests()
    initialise_test_harness(filename="../configuration_examples/interlocking_semaphore_example.sig")
    run_initial_semaphore_state_tests()
    run_signal_route_tests()
    run_semaphore_aspect_tests()
    run_point_interlocking_tests()
    run_signal_interlocking_tests()
    run_semaphore_interlock_ahead_tests()
    
if __name__ == "__main__":
    run_all_interlocking_tests()
    complete_tests(shutdown=False)

######################################################################################################
