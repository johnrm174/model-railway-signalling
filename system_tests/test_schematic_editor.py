#-----------------------------------------------------------------------------------
# System tests for the schematic editor functions (in EDIT MODE ONLY)
#    Select/de-select objects via mouse/keyboard
#    Select objects via area selection
#    Create objects
#    Delete objects
#    Rotate objects
#    Move (drag and drop) objects
#    Editing of Lines (Drag and drop line ends)
#    copy and paste objects
#    The ability to move backwards and forwards through the undo buffer
#    Resetting of the undo buffer following a change
#-----------------------------------------------------------------------------------

from system_test_harness import *

#-----------------------------------------------------------------------------------
# This function tests the following schematic functions:
#    Select/de-select objects via mouse/keyboard
#    Select objects via area selection
#    Create objects
#    Delete objects
#    Rotate objects
#    Move (drag and drop) objects
#    Editing of Lines (Drag and drop line ends)
#    copy and paste objects
#-----------------------------------------------------------------------------------

def run_basic_editor_tests(delay:float=0.0):
    print("Basic schematic editor tests")
    # Add elements to the layout and move them to their initial positions
    s1 = create_colour_light_signal()                 
    sleep(delay)
    select_and_move_objects(s1,100,100,delay=delay)
    sleep(delay)
    s2 = create_semaphore_signal()
    sleep(delay)
    select_and_move_objects(s2,250,100,delay=delay)
    sleep(delay)
    s3 = create_ground_position_signal()
    sleep(delay)
    select_and_move_objects(s3,400,100,delay=delay)
    sleep(delay)
    s4 = create_ground_disc_signal()
    sleep(delay)
    select_and_move_objects(s4,500,100,delay=delay)
    sleep(delay)
    p1 = create_left_hand_point()
    sleep(delay)
    select_and_move_objects(p1,575,100,delay=delay)
    sleep(delay)
    p2 = create_right_hand_point()
    sleep(delay)
    select_and_move_objects(p2,625,100,delay=delay)
    sleep(delay)
    t1 = create_track_section()
    sleep(delay)
    select_and_move_objects(t1,700,100,delay=delay)
    sleep(delay)
    i1 = create_block_instrument()
    sleep(delay)
    select_and_move_objects(i1,200,300,delay=delay)
    sleep(delay)
    l1 = create_line()
    sleep(delay)
    select_and_move_objects(l1,200,150,delay=delay)
    sleep(delay)
    l2 = create_line()
    select_and_move_objects(l2,500,150,delay=delay)
    sleep(delay)
    # Line2 will remain selected after the move
    assert_objects_selected(l2)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,i1)
    deselect_all_objects()
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    sleep(delay)
    # Test initial moves have been successful
    assert_object_position(s1,100,100)
    assert_object_position(s2,250,100)
    assert_object_position(s3,400,100)
    assert_object_position(s4,500,100)
    assert_object_position(p1,575,100)
    assert_object_position(p2,625,100)
    assert_object_position(t1,700,100)
    assert_object_position(i1,200,300)
    assert_object_position(l1,175,150,225,150)
    assert_object_position(l2,475,150,525,150)
    # Object selection tests (Left Click)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s1)
    sleep(delay)
    assert_objects_selected(s1)
    assert_objects_deselected(s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s2)
    sleep(delay)
    assert_objects_selected(s2)
    assert_objects_deselected(s1,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s3)
    sleep(delay)
    assert_objects_selected(s3)
    assert_objects_deselected(s1,s2,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s4)
    sleep(delay)
    assert_objects_selected(s4)
    assert_objects_deselected(s1,s2,s3,p1,p2,t1,l1,l2,i1)
    select_single_object(p1)
    sleep(delay)
    assert_objects_selected(p1)
    assert_objects_deselected(s1,s2,s3,s4,p2,t1,l1,l2,i1)
    select_single_object(p2)
    sleep(delay)
    assert_objects_selected(p2)
    assert_objects_deselected(s1,s2,s3,s4,p1,t1,l1,l2,i1)
    select_single_object(t1)
    sleep(delay)
    assert_objects_selected(t1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,l1,l2,i1)
    select_single_object(l1)
    sleep(delay)
    assert_objects_selected(l1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l2,i1)
    select_single_object(l2)
    sleep(delay)
    assert_objects_selected(l2)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,i1)
    # Object selection tests (Left Shift Click)
    assert_objects_selected(l2)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,i1)
    select_or_deselect_objects(l1)
    sleep(delay)
    assert_objects_selected(l1,l2)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1)
    assert_objects_deselected(s2,s3,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s2)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2)
    assert_objects_deselected(s3,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s3)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3)
    assert_objects_deselected(s4,p1,p2,t1,i1)
    select_or_deselect_objects(s4)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4)
    assert_objects_deselected(p1,p2,t1,i1)
    select_or_deselect_objects(p1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1)
    assert_objects_deselected(p2,t1,i1)
    select_or_deselect_objects(p2)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1,p2)
    assert_objects_deselected(t1,i1)
    select_or_deselect_objects(t1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1,p2,t1)
    assert_objects_deselected(i1)
    select_or_deselect_objects(i1)
    sleep(delay)
    assert_objects_selected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    # Object de-selection tests (Left Shift Click)
    assert_objects_selected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_or_deselect_objects(s1)
    sleep(delay)
    assert_objects_selected(s2,s3,s4,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1)
    select_or_deselect_objects(s2)
    sleep(delay)
    assert_objects_selected(s3,s4,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2)
    select_or_deselect_objects(s3)
    sleep(delay)
    assert_objects_selected(s4,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3)
    select_or_deselect_objects(s4)
    sleep(delay)
    assert_objects_selected(p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4)
    select_or_deselect_objects(p1)
    sleep(delay)
    assert_objects_selected(p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1)
    select_or_deselect_objects(p2)
    sleep(delay)
    assert_objects_selected(t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2)
    select_or_deselect_objects(t1)
    sleep(delay)
    assert_objects_selected(l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1)
    select_or_deselect_objects(l1)
    sleep(delay)
    assert_objects_selected(l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1)
    select_or_deselect_objects(l2)
    sleep(delay)
    assert_objects_selected(i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    select_or_deselect_objects(i1)
    sleep(delay)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    # Test editing of line ends
    select_single_object(l1)
    sleep(delay)
    select_and_move_line_end(l1,1,25,100,delay=delay)
    sleep(delay)
    select_and_move_line_end(l1,2,550,100,delay=delay)
    sleep(delay)
    select_single_object(l2)
    sleep(delay)
    select_and_move_line_end(l2,1,650,100,delay=delay)
    sleep(delay)
    select_and_move_line_end(l2,2,800,100,delay=delay)
    sleep(delay)
    assert_object_position(l1,25,100,550,100)
    assert_object_position(l2,650,100,800,100)
    # Test area selection
    select_area(10,10,850,200,delay=delay)
    sleep(delay)
    assert_objects_selected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    assert_objects_deselected(i1)
    select_and_move_objects(s3,450,150,delay=delay) 
    sleep(delay)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    assert_objects_selected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    assert_objects_deselected(i1)
    deselect_all_objects()    
    sleep(delay)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    # Test select all objects & Rotate of signals & Points
    select_all_objects()    
    sleep(delay)
    assert_objects_selected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    assert_object_configuration(s1,{"orientation" : 0})
    assert_object_configuration(s2,{"orientation" : 0})
    assert_object_configuration(s3,{"orientation" : 0})
    assert_object_configuration(s4,{"orientation" : 0})
    assert_object_configuration(p1,{"orientation" : 0})
    assert_object_configuration(p2,{"orientation" : 0})
    rotate_selected_objects()
    sleep(delay)
    assert_object_configuration(s1,{"orientation" : 180})
    assert_object_configuration(s2,{"orientation" : 180})
    assert_object_configuration(s3,{"orientation" : 180})
    assert_object_configuration(s4,{"orientation" : 180})
    assert_object_configuration(p1,{"orientation" : 180})
    assert_object_configuration(p2,{"orientation" : 180})
    rotate_selected_objects()
    sleep(delay)
    assert_object_configuration(s1,{"orientation" : 0})
    assert_object_configuration(s2,{"orientation" : 0})
    assert_object_configuration(s3,{"orientation" : 0})
    assert_object_configuration(s4,{"orientation" : 0})
    assert_object_configuration(p1,{"orientation" : 0})
    assert_object_configuration(p2,{"orientation" : 0})
    # Test copy and paste and then move (not the block instrument)
    select_or_deselect_objects(i1)
    sleep(delay)
    assert_objects_selected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    assert_objects_deselected(i1)
    copy_selected_objects()
    sleep(delay)
    new_objects = paste_clipboard_objects()
    [s11,s12,s13,s14,p11,p12,t11,l11,l12] = new_objects
    sleep(delay)
    assert_objects_selected(s11,s12,s13,s14,p11,p12,t11,l11,l12)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    # Select the Track section (should not be overlayed)
    select_and_move_objects(t11,750,75,delay=delay)
    sleep(1)
    # Test delete of selected objects
    assert_objects_selected(s11,s12,s13,s14,p11,p12,t11,l11,l12)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    delete_selected_objects()
    sleep(delay)
    assert_objects_do_not_exist(s11,s12,s13,s14,p11,p12,t11,l11,l12)
    assert_objects_exist(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    # Finally test copy/paste of block instrument
    select_single_object(i1)
    sleep(delay)
    assert_objects_selected(i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    copy_selected_objects()
    sleep(delay)
    new_objects = paste_clipboard_objects()
    [i11] = new_objects
    assert_objects_selected(i11)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    sleep(delay)
    # Select and move the original instrument (as this will get selected if we try to select the new one)
    select_and_move_objects(i1,600,325,delay=delay)
    assert_object_position(i1,600,325)
    # clean up
    sleep(delay)
    select_all_objects()
    sleep(delay)
    delete_selected_objects()
    return()

#-----------------------------------------------------------------------------------
# These test the schematic undo and re-do functions, specifically:
#    The ability to move backwards and forwards through the undo buffer
#    Resetting of the undo buffer following a change
#-----------------------------------------------------------------------------------

def run_undo_and_redo_tests(delay:float=0.0):
    print("Schematic Undo and Redo tests")
    # Initialise the test harness to give us a 'new' schematic
    sleep(delay)
    initialise_test_harness()
    # Create an initial event
    sleep(delay)
    p1 = create_left_hand_point()                         # event 1 #
    assert_objects_exist(p1)
    # Re-initialise the test harness to give us a 'new' schematic
    sleep(delay)
    initialise_test_harness()
    assert_objects_do_not_exist(p1)
    # Create a new chain of events
    sleep(delay)
    s1 = create_colour_light_signal()                     # event 1 #
    assert_objects_exist(s1)
    sleep(delay)
    assert_object_position(s1,75,50)
    select_and_move_objects(s1,100,100,delay=delay)       # event 2 #
    assert_object_position(s1,100,100)
    sleep(delay)
    l1 = create_line()                                    # event 3 #
    assert_objects_exist(l1)
    sleep(delay)
    assert_object_position(l1,75,50,125,50)
    select_and_move_objects(l1,500,150,delay=delay)       # event 4 #
    assert_object_position(l1,475,150,525,150)
    sleep(delay)
    select_and_move_line_end(l1,1,25,100,delay=delay)     # event 5 #
    assert_object_position(l1,25,100,525,150)
    sleep(delay)
    select_and_move_line_end(l1,2,550,100,delay=delay)    # event 6 #
    assert_object_position(l1,25,100,550,100)
    sleep(delay)
    select_single_object(s1)    
    sleep(delay)
    assert_object_configuration(s1,{"orientation":0})  
    rotate_selected_objects()                             # event 7 #
    assert_object_configuration(s1,{"orientation":180})  
    sleep(delay)
    copy_selected_objects()
    [s11] = paste_clipboard_objects()                     # event 8 #
    assert_objects_exist(s11)
    sleep(delay)
    delete_selected_objects()                             # event 9 #
    assert_objects_do_not_exist(s11)
    sleep(delay)
    assert_object_configuration(s1,{"itemid":1})  
    update_object_configuration(s1,{"itemid":2})          # event 10 #
    assert_object_configuration(s1,{"itemid":2})
    # check undo
    sleep(delay)
    assert_object_configuration(s1,{"itemid":2})
    undo()
    assert_object_configuration(s1,{"itemid":1})          # undo of event 10 #
    sleep(delay)
    assert_objects_do_not_exist(s11)                 
    undo()                                                # undo of event 9 #
    assert_objects_exist(s11)
    sleep(delay)
    undo()                                                # undo of event 8 #
    assert_objects_do_not_exist(s11)
    sleep(delay)
    assert_object_configuration(s1,{"orientation":180})
    undo()                                                # undo of event 7 #
    assert_object_configuration(s1,{"orientation":0})
    sleep(delay)
    assert_object_position(l1,25,100,550,100)
    undo()                                                # undo of event 6 #
    assert_object_position(l1,25,100,525,150)
    sleep(delay)
    assert_object_position(l1,25,100,525,150)
    undo()                                                # undo of event 5 #
    assert_object_position(l1,475,150,525,150)
    sleep(delay)
    undo()                                                # undo of event 4 #
    assert_object_position(l1,75,50,125,50)    
    sleep(delay)
    assert_objects_exist(l1)
    undo()                                                # undo of event 3 #
    assert_objects_do_not_exist(l1)    
    sleep(delay)
    assert_object_position(s1,100,100)
    undo()                                                # undo of event 2 #
    assert_object_position(s1,75,50)
    sleep(delay)
    assert_objects_exist(s1)
    undo()                                                # undo of event 1 #
    assert_objects_do_not_exist(s1)
    # Test we can't go back any further (buffer was reset)
    undo()                                               
    assert_objects_do_not_exist(p1)
    undo()                                               
    assert_objects_do_not_exist(p1)
    undo()                                               
    assert_objects_do_not_exist(p1)
    undo()                                               
    assert_objects_do_not_exist(p1)
    # Test re-do of all 10 events
    sleep(delay)
    assert_objects_do_not_exist(s1)
    redo()
    assert_objects_exist(s1)
    sleep(delay)
    assert_object_position(s1,75,50)
    redo()
    assert_object_position(s1,100,100)
    sleep(delay)
    assert_objects_do_not_exist(l1)
    redo()
    assert_objects_exist(l1)
    sleep(delay)
    assert_object_position(l1,75,50,125,50)
    redo()
    assert_object_position(l1,475,150,525,150)
    sleep(delay)
    redo()
    assert_object_position(l1,25,100,525,150)
    sleep(delay)
    redo()
    assert_object_position(l1,25,100,550,100)
    sleep(delay)
    select_single_object(s1)    
    sleep(delay)
    assert_object_configuration(s1,{"orientation":0})  
    redo()
    assert_object_configuration(s1,{"orientation":180})  
    sleep(delay)
    copy_selected_objects()
    assert_objects_do_not_exist(s11)
    redo()
    assert_objects_exist(s11)
    sleep(delay)
    redo()
    assert_objects_do_not_exist(s11)
    sleep(delay)
    assert_object_configuration(s1,{"itemid":1})  
    redo()
    assert_object_configuration(s1,{"itemid":2})   
    # Test we can't go any further forward (end of buffer)
    redo()                                               
    redo()                                               
    redo()                                               
    redo()
    # Test undo again
    sleep(delay)
    assert_object_configuration(s1,{"itemid":2})
    undo()                                                # undo of event 10 #
    assert_object_configuration(s1,{"itemid":1})
    sleep(delay)
    assert_objects_do_not_exist(s11)                 
    undo()                                                # undo of event 9 #
    assert_objects_exist(s11)
    # make a change to delete the buffer of re-dos from the current point
    sleep(delay)
    p1 = create_left_hand_point()                        
    # Test we can't go any further forward (end of buffer)
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    # one final undo
    sleep(delay)
    undo()
    assert_objects_do_not_exist(p1)
    # clean up
    sleep(delay)
    select_all_objects()
    sleep(delay)
    delete_selected_objects()
    return()

######################################################################################################

def run_all_schematic_editor_tests(delay:float=0.0, shutdown:bool=False):
    initialise_test_harness()
    set_edit_mode()
    run_basic_editor_tests(delay)
    run_undo_and_redo_tests(delay)
    if shutdown: report_results()
    
if __name__ == "__main__":
    start_application(lambda:run_all_schematic_editor_tests(delay=0.0, shutdown=True))

###############################################################################################################################
    
