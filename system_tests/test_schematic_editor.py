#-----------------------------------------------------------------------------------
# System tests for the schematic editor functions (in EDIT MODE ONLY)
#    Basic schematic editing:
#       Create individual objects
#       Move selected objects (drag and drop with cursor) - snap to grid on/off
#       Move selected objects (nudge with arrow keys) - snap to grid on/off
#       Editing of Lines (Drag and drop line ends) - snap to grid on/off
#       Select/de-select objects via mouse/keyboard
#       Add/remove objects from current selection 
#       Select multiple objects via area selection
#       Delete selected objects
#       Rotate selected objects
#       snap-to-grid of selected objects
#       copy and paste selected objects
#       cancel of move in progress
#       cancel area selection in progress
#       cancel line edit in progress
#    Undo/Redo:
#       The ability to move backwards and forwards through the undo/redo buffer
#       Resetting of the undo/redo buffer following a new edit (i.e. cant re-do)
#    Edit configuration of selected objects
#       Basic tests to open the appropriate object configuration window (and then
#       close the window) on 'edit object' (double click or object popup menu)
#
#-----------------------------------------------------------------------------------

from system_test_harness import *

#-----------------------------------------------------------------------------------
# This function tests the following schematic functions:
#    Editing of objects (i.e. opening and closing the edit windows)
#-----------------------------------------------------------------------------------

def run_object_edit_window_tests(delay:float=0.0):
    print("Object edit window tests - Test basic opening and closing of edit windows")
    # Add elements to the layout and move them to their initial positions
    l1 = create_line()
    sleep(delay)
    assert_objects_selected(l1)
    select_and_edit_single_object(l1)
    sleep(delay)
    delete_selected_objects()
    sleep(delay)
    tb1 = create_textbox()
    sleep(delay)
    assert_objects_selected(tb1)
    select_and_edit_single_object(tb1)
    sleep(delay)
    delete_selected_objects()
    sleep(delay)
    s1 = create_colour_light_signal()
    sleep(delay)
    assert_objects_selected(s1)
    select_and_edit_single_object(s1)
    sleep(delay)
    delete_selected_objects()
    sleep(delay)
    p1 = create_left_hand_point()
    sleep(delay)
    assert_objects_selected(p1)
    select_and_edit_single_object(p1)
    sleep(delay)
    delete_selected_objects()
    sleep(delay)
    t1 = create_track_section()
    sleep(delay)
    assert_objects_selected(t1)
    select_and_edit_single_object(t1)
    sleep(delay)
    delete_selected_objects()
    sleep(delay)
    i1 = create_block_instrument()
    sleep(delay)
    assert_objects_selected(i1)
    select_and_edit_single_object(i1)
    sleep(delay)
    delete_selected_objects()
    sleep(delay)

#-----------------------------------------------------------------------------------
# This function tests the following schematic functions:
#       Create individual objects
#       Move selected objects (drag and drop with cursor) - snap to grid on/off
#       Move selected objects (nudge with arrow keys) - snap to grid on/off
#       Editing of Lines (Drag and drop line ends) - snap to grid on/off
#       Select/de-select objects via mouse/keyboard
#       Add/remove objects from current selection 
#       Select multiple objects via area selection
#       Delete selected objects
#       Rotate selected objects
#       snap-to-grid of selected objects
#       copy and paste selected objects
#       cancel of move in progress
#       cancel area selection in progress
#       cancel line edit in progress
#-----------------------------------------------------------------------------------

def run_basic_editor_tests(delay:float=0.0):
    
    print("Basic schematic editor tests - create and move schematic objects (with snap-to-grid on)")
    # Add elements to the layout and move them to their initial positions
    # Note that some objects are moved 'off-grid' to test the snap-to-grid functionality
    tb1 = create_textbox()
    assert_objects_selected(tb1)
    sleep(delay)
    select_and_move_objects(tb1,400,25,delay=delay)
    sleep(delay)
    s1 = create_colour_light_signal()
    assert_objects_selected(s1)
    assert_objects_deselected(tb1)
    sleep(delay)
    select_and_move_objects(s1,90,100,delay=delay)
    sleep(delay)
    s2 = create_semaphore_signal()
    assert_objects_selected(s2)
    assert_objects_deselected(s1)
    sleep(delay)
    select_and_move_objects(s2,260,100,delay=delay)
    sleep(delay)
    s3 = create_ground_position_signal()
    assert_objects_selected(s3)
    assert_objects_deselected(s2)
    sleep(delay)
    select_and_move_objects(s3,400,90,delay=delay)
    sleep(delay)
    s4 = create_ground_disc_signal()
    assert_objects_selected(s4)
    assert_objects_deselected(s3)
    sleep(delay)
    select_and_move_objects(s4,500,110,delay=delay)
    sleep(delay)
    p1 = create_left_hand_point()
    assert_objects_selected(p1)
    assert_objects_deselected(s4)
    sleep(delay)
    select_and_move_objects(p1,570,95,delay=delay)
    sleep(delay)
    p2 = create_right_hand_point()
    assert_objects_selected(p2)
    assert_objects_deselected(p1)
    sleep(delay)
    select_and_move_objects(p2,630,105,delay=delay)
    sleep(delay)
    t1 = create_track_section()
    assert_objects_selected(t1)
    assert_objects_deselected(p2)
    sleep(delay)
    select_and_move_objects(t1,700,100,delay=delay)
    sleep(delay)
    i1 = create_block_instrument()
    assert_objects_selected(i1)
    assert_objects_deselected(t1)
    sleep(delay)
    select_and_move_objects(i1,200,300,delay=delay)
    sleep(delay)
    l1 = create_line()
    assert_objects_selected(l1)
    assert_objects_deselected(i1)
    sleep(delay)
    update_object_configuration(l1,{"arrowtype":[1,1,1], "arrowends":1})
    sleep(delay)
    select_and_move_objects(l1,200,150,delay=delay)
    sleep(delay)
    l2 = create_line()
    assert_objects_selected(l2)
    assert_objects_deselected(l1)
    sleep(delay)
    update_object_configuration(l2,{"arrowtype":[1,1,1], "arrowends":2})
    select_and_move_objects(l2,500,150,delay=delay)
    sleep(delay)
    # Line2 will remain selected after the move
    assert_objects_selected(l2)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,i1)
    deselect_all_objects()
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    sleep(delay)
    # Test initial moves have been successful
    assert_object_position(tb1,400,25)
    assert_object_position(s1,100,100)
    assert_object_position(s2,250,100)
    assert_object_position(s3,400,100)
    assert_object_position(s4,500,100)
    assert_object_position(p1,575,100)
    assert_object_position(p2,625,100)
    assert_object_position(t1,700,100)
    assert_object_position(i1,200,300)
    assert_object_position(l1,175,150,225,150)
    assert_object_position(l2,475,150,525,150)
    
    print("Basic schematic editor tests - Object selection/deselection tests - Left Click")
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(tb1)
    sleep(delay)
    assert_objects_selected(tb1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s1)
    sleep(delay)
    assert_objects_selected(s1)
    assert_objects_deselected(tb1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s2)
    sleep(delay)
    assert_objects_selected(s2)
    assert_objects_deselected(tb1,s1,s3,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s3)
    sleep(delay)
    assert_objects_selected(s3)
    assert_objects_deselected(tb1,s1,s2,s4,p1,p2,t1,l1,l2,i1)
    select_single_object(s4)
    sleep(delay)
    assert_objects_selected(s4)
    assert_objects_deselected(s1,s2,s3,p1,p2,t1,l1,l2,i1)
    select_single_object(p1)
    sleep(delay)
    assert_objects_selected(p1)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p2,t1,l1,l2,i1)
    select_single_object(p2)
    sleep(delay)
    assert_objects_selected(p2)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,t1,l1,l2,i1)
    select_single_object(t1)
    sleep(delay)
    assert_objects_selected(t1)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,l1,l2,i1)
    select_single_object(l1)
    sleep(delay)
    assert_objects_selected(l1)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l2,i1)
    select_single_object(l2)
    sleep(delay)
    assert_objects_selected(l2)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,i1)
    
    print("Basic schematic editor tests - Object selection/deselection tests - Left Shift Click")
    assert_objects_selected(l2)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,i1)
    select_or_deselect_objects(l1)
    sleep(delay)
    assert_objects_selected(l1,l2)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1)
    assert_objects_deselected(tb1,s2,s3,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s2)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2)
    assert_objects_deselected(tb1,s3,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s3)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3)
    assert_objects_deselected(tb1,s4,p1,p2,t1,i1)
    select_or_deselect_objects(s4)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4)
    assert_objects_deselected(tb1,p1,p2,t1,i1)
    select_or_deselect_objects(p1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1)
    assert_objects_deselected(tb1,p2,t1,i1)
    select_or_deselect_objects(p2)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1,p2)
    assert_objects_deselected(tb1,t1,i1)
    select_or_deselect_objects(t1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1,p2,t1)
    assert_objects_deselected(tb1,i1)
    select_or_deselect_objects(i1)
    assert_objects_deselected(tb1)
    sleep(delay)
    assert_objects_selected(l1,l2,s1,s2,s3,s4,p1,p2,t1,i1)
    assert_objects_deselected(tb1)
    select_or_deselect_objects(tb1)
    sleep(delay)
    assert_objects_selected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    # Object de-selection tests (Left Shift Click)
    assert_objects_selected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_or_deselect_objects(s1)
    sleep(delay)
    assert_objects_selected(tb1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1)
    select_or_deselect_objects(s2)
    sleep(delay)
    assert_objects_selected(tb1,s3,s4,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2)
    select_or_deselect_objects(s3)
    sleep(delay)
    assert_objects_selected(tb1,s4,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3)
    select_or_deselect_objects(s4)
    sleep(delay)
    assert_objects_selected(tb1,p1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4)
    select_or_deselect_objects(p1)
    sleep(delay)
    assert_objects_selected(tb1,p2,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1)
    select_or_deselect_objects(p2)
    sleep(delay)
    assert_objects_selected(tb1,t1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2)
    select_or_deselect_objects(t1)
    sleep(delay)
    assert_objects_selected(tb1,l1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1)
    select_or_deselect_objects(l1)
    sleep(delay)
    assert_objects_selected(tb1,l2,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1)
    select_or_deselect_objects(l2)
    sleep(delay)
    assert_objects_selected(tb1,i1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2)
    select_or_deselect_objects(i1)
    sleep(delay)
    assert_objects_selected(tb1)
    assert_objects_deselected(s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    select_or_deselect_objects(tb1)
    sleep(delay)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    
    print("Basic schematic editor tests - Test cancel of Line edit in progress")
    select_single_object(l1)
    sleep(delay)
    select_and_move_line_end(l1,1,20,95,delay=delay,test_cancel=True)
    assert_object_position(l1,175,150,225,150)
    select_and_move_line_end(l1,2,555,105,delay=delay,test_cancel=True)
    assert_object_position(l1,175,150,225,150)
    sleep(delay)

    print("Basic schematic editor tests - Line editing (with snap-to-grid off)")
    toggle_snap_to_grid()
    sleep(delay)
    select_single_object(l1)
    sleep(delay)
    select_and_move_line_end(l1,1,165,160,delay=delay)
    sleep(delay)
    select_and_move_line_end(l1,2,235,140,delay=delay)
    sleep(delay)
    assert_object_position(l1,165,160,235,140)
    
    print("Basic schematic editor tests - Snap to grid of line ends (s-key)")
    snap_selected_objects_to_grid()
    sleep(delay)
    assert_object_position(l1,175,150,225,150)
    toggle_snap_to_grid()
    sleep(delay)

    print("Basic schematic editor tests - Line editing (with snap-to-grid on)")
    select_single_object(l1)
    sleep(delay)
    select_and_move_line_end(l1,1,20,95,delay=delay)
    sleep(delay)
    select_and_move_line_end(l1,2,555,105,delay=delay)
    sleep(delay)
    select_single_object(l2)
    sleep(delay)
    select_and_move_line_end(l2,1,650,100,delay=delay)
    sleep(delay)
    select_and_move_line_end(l2,2,650,300,delay=delay)
    sleep(delay)
    select_and_move_line_end(l2,2,800,100,delay=delay)
    sleep(delay)
    assert_object_position(l1,25,100,550,100)
    assert_object_position(l2,650,100,800,100)

    print("Basic schematic editor tests - Test cancel of Area selection in progress")
    select_area(10,10,850,200,delay=delay,test_cancel=True)
    sleep(delay)
    assert_objects_deselected(i1,tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2)
    
    print("Basic schematic editor tests - Area selection and move of selected objects (snap-to-grid on)")
    select_area(10,10,850,200,delay=delay)
    sleep(delay)
    assert_objects_selected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2)
    assert_objects_deselected(i1)
    # Test move of selected objects (note s3 position was 400,100)
    select_and_move_objects(s3,450,150,delay=delay) 
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    
    print("Basic schematic editor tests - Area selection and move of selected objects (snap-to-grid off)")
    toggle_snap_to_grid()
    sleep(delay)
    # Test move of selected objects (note s3 position was 450,150)
    select_and_move_objects(s3,460,160,delay=delay) 
    sleep(delay)
    assert_object_position(tb1,460,85)
    assert_object_position(s1,160,160)
    assert_object_position(s2,310,160)
    assert_object_position(s3,460,160)
    assert_object_position(s4,560,160)
    assert_object_position(p1,635,160)
    assert_object_position(p2,685,160)
    assert_object_position(t1,760,160)
    assert_object_position(l1,85,160,610,160)
    assert_object_position(l2,710,160,860,160)
    # Test snap to grid of selected objects (note s3 position was 440,140)
    snap_selected_objects_to_grid()
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    # Test move of selected objects (note s3 position was 450,150 after the snap to grid)
    select_and_move_objects(s3,440,140,delay=delay) 
    sleep(delay)
    assert_object_position(tb1,440,65)
    assert_object_position(s1,140,140)
    assert_object_position(s2,290,140)
    assert_object_position(s3,440,140)
    assert_object_position(s4,540,140)
    assert_object_position(p1,615,140)
    assert_object_position(p2,665,140)
    assert_object_position(t1,740,140)
    assert_object_position(l1,65,140,590,140)
    assert_object_position(l2,690,140,840,140)
    # Test snap to grid of selected objects (note s3 position was 440,140)
    snap_selected_objects_to_grid()
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    toggle_snap_to_grid()
    sleep(delay)
        
    print("Basic schematic editor tests - Nudging of selected objects (arrow keys) - snap to grid ON")
    # Test nudging of selected objects - Snap to grid is ON by default
    # so the objects will be nudged by the grid value (25 pixels)
    nudge_selected_objects("Right")
    sleep(delay)
    assert_object_position(tb1,475,75)
    assert_object_position(s1,175,150)
    assert_object_position(s2,325,150)
    assert_object_position(s3,475,150)
    assert_object_position(s4,575,150)
    assert_object_position(p1,650,150)
    assert_object_position(p2,700,150)
    assert_object_position(t1,775,150)
    assert_object_position(l1,100,150,625,150)
    assert_object_position(l2,725,150,875,150)
    nudge_selected_objects("Down")
    sleep(delay)
    assert_object_position(tb1,475,100)
    assert_object_position(s1,175,175)
    assert_object_position(s2,325,175)
    assert_object_position(s3,475,175)
    assert_object_position(s4,575,175)
    assert_object_position(p1,650,175)
    assert_object_position(p2,700,175)
    assert_object_position(t1,775,175)
    assert_object_position(l1,100,175,625,175)
    assert_object_position(l2,725,175,875,175)
    nudge_selected_objects("Left")
    sleep(delay)
    assert_object_position(tb1,450,100)
    assert_object_position(s1,150,175)
    assert_object_position(s2,300,175)
    assert_object_position(s3,450,175)
    assert_object_position(s4,550,175)
    assert_object_position(p1,625,175)
    assert_object_position(p2,675,175)
    assert_object_position(t1,750,175)
    assert_object_position(l1,75,175,600,175)
    assert_object_position(l2,700,175,850,175)
    nudge_selected_objects("Up")
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    
    print("Basic schematic editor tests - Nudging of selected objects (arrow keys) - snap to grid OFF")
    # Test Nudging of object with snap to grid off - objects will be nudged by 1 pixel
    toggle_snap_to_grid()
    sleep(delay)
    nudge_selected_objects("Down")
    sleep(delay)
    nudge_selected_objects("Down")
    sleep(delay)
    nudge_selected_objects("Down")
    sleep(delay)
    nudge_selected_objects("Right")
    sleep(delay)
    nudge_selected_objects("Right")
    sleep(delay)
    nudge_selected_objects("Right")
    sleep(delay)
    assert_object_position(tb1,453,78)
    assert_object_position(s1,153,153)
    assert_object_position(s2,303,153)
    assert_object_position(s3,453,153)
    assert_object_position(s4,553,153)
    assert_object_position(p1,628,153)
    assert_object_position(p2,678,153)
    assert_object_position(t1,753,153)
    assert_object_position(l1,78,153,603,153)
    assert_object_position(l2,703,153,853,153)
    
    print("Basic schematic editor tests - Snap to grid of selected objects (s-key)")
    # Test Snap to grid
    snap_selected_objects_to_grid()
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    sleep(delay)
    # Test Nudging of object in the other direction with snap to grid off
    nudge_selected_objects("Up")
    sleep(delay)
    nudge_selected_objects("Up")
    sleep(delay)
    nudge_selected_objects("Up")
    sleep(delay)
    nudge_selected_objects("Left")
    sleep(delay)
    nudge_selected_objects("Left")
    sleep(delay)
    nudge_selected_objects("Left")
    sleep(delay)
    assert_object_position(tb1,447,72)
    assert_object_position(s1,147,147)
    assert_object_position(s2,297,147)
    assert_object_position(s3,447,147)
    assert_object_position(s4,547,147)
    assert_object_position(p1,622,147)
    assert_object_position(p2,672,147)
    assert_object_position(t1,747,147)
    assert_object_position(l1,72,147,597,147)
    assert_object_position(l2,697,147,847,147)
    snap_selected_objects_to_grid()
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    sleep(delay)
    # Re-enable snap to grid
    toggle_snap_to_grid()
    sleep(delay)
    
    print("Basic schematic editor tests - Scrolling of canvas area (arrow keys)")
    # Test scrolling of the canvas (Arrow keys when no objects selected).
    # We first have to force a re-size of the root window to make it smaller than the canvas size
    run_function(lambda:schematic.root.geometry("500x300"))
    sleep(0.5)
    deselect_all_objects()
    sleep(delay)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    nudge_selected_objects("Right")
    sleep(delay)
    nudge_selected_objects("Right")
    sleep(delay)
    nudge_selected_objects("Down")
    sleep(delay)
    nudge_selected_objects("Down")
    sleep(delay)
    nudge_selected_objects("Left")
    sleep(delay)
    nudge_selected_objects("Left")
    sleep(delay)
    nudge_selected_objects("Up")
    sleep(delay)
    nudge_selected_objects("Up")
    sleep(delay)
    reset_window_size()
    sleep(delay)
    
    print("Basic schematic editor tests - Cancel of move in progress (esc-key)")
    # Test cancel of a move in progress (note s3 start position is 450,150)
    select_area(60,60,900,250,delay=delay)
    assert_objects_selected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2)
    assert_objects_deselected(i1)
    select_and_move_objects(s3,403,98,delay=delay,test_cancel=True) 
    sleep(delay)
    assert_object_position(tb1,450,75)
    assert_object_position(s1,150,150)
    assert_object_position(s2,300,150)
    assert_object_position(s3,450,150)
    assert_object_position(s4,550,150)
    assert_object_position(p1,625,150)
    assert_object_position(p2,675,150)
    assert_object_position(t1,750,150)
    assert_object_position(l1,75,150,600,150)
    assert_object_position(l2,700,150,850,150)
    
    print("Basic schematic editor tests - Rotation of signals and points (r-key)")
    select_all_objects()    
    sleep(delay)
    assert_objects_selected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    assert_object_configuration(s1,{"orientation" : 0})
    assert_object_configuration(s2,{"orientation" : 0})
    assert_object_configuration(s3,{"orientation" : 0})
    assert_object_configuration(s4,{"orientation" : 0})
    assert_object_configuration(p1,{"orientation" : 0})
    assert_object_configuration(p2,{"orientation" : 0})
    rotate_selected_objects()
    sleep(delay)
    assert_object_configuration(s1,{"orientation" : 180})
    assert_object_configuration(s2,{"orientation" : 180})
    assert_object_configuration(s3,{"orientation" : 180})
    assert_object_configuration(s4,{"orientation" : 180})
    assert_object_configuration(p1,{"orientation" : 180})
    assert_object_configuration(p2,{"orientation" : 180})
    rotate_selected_objects()
    sleep(delay)
    assert_object_configuration(s1,{"orientation" : 0})
    assert_object_configuration(s2,{"orientation" : 0})
    assert_object_configuration(s3,{"orientation" : 0})
    assert_object_configuration(s4,{"orientation" : 0})
    assert_object_configuration(p1,{"orientation" : 0})
    assert_object_configuration(p2,{"orientation" : 0})
    
    print("Basic schematic editor tests - Copy and paste selected objects (Cntl-c/Cntl-v)")
    # Test copy and paste and then move (not the block instrument)
    select_or_deselect_objects(i1)
    sleep(delay)
    assert_objects_selected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2)
    assert_objects_deselected(i1)
    copy_selected_objects()
    sleep(delay)
    new_objects = paste_clipboard_objects()
    [tb11,s11,s12,s13,s14,p11,p12,t11,l11,l12] = new_objects
    sleep(delay)
    assert_objects_selected(tb11,s11,s12,s13,s14,p11,p12,t11,l11,l12)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    # Select the Track section (should not be overlayed)
    select_and_move_objects(t11,750,75,delay=delay)
    sleep(delay)
    
    print("Basic schematic editor tests - Delete selected objects (backspace-key)")
    # Test delete of selected objects
    assert_objects_selected(tb11,s11,s12,s13,s14,p11,p12,t11,l11,l12)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    delete_selected_objects()
    sleep(delay)
    assert_objects_do_not_exist(tb11,s11,s12,s13,s14,p11,p12,t11,l11,l12)
    assert_objects_exist(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    
    print("Basic schematic editor tests - Copy and paste selected objects (Cntl-c/Cntl-v)")
    # Finally test copy/paste of block instrument
    select_single_object(i1)
    sleep(delay)
    assert_objects_selected(i1)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2)
    copy_selected_objects()
    sleep(delay)
    new_objects = paste_clipboard_objects()
    [i11] = new_objects
    assert_objects_selected(i11)
    assert_objects_deselected(tb1,s1,s2,s3,s4,p1,p2,t1,l1,l2,i1)
    sleep(delay)
    # Select and move the original instrument (as this will get selected if we try to select the new one)
    select_and_move_objects(i1,600,325,delay=delay)
    assert_object_position(i1,600,325)
    
    # clean up
    sleep(delay)
    select_all_objects()
    sleep(delay)
    delete_selected_objects()
    return()

#-----------------------------------------------------------------------------------
# These test the schematic undo and re-do functions, specifically:
#       The ability to move backwards and forwards through the undo/redo buffer
#       Resetting of the undo/redo buffer following a new edit (i.e. cant re-do)
#-----------------------------------------------------------------------------------

def run_undo_and_redo_tests(delay:float=0.0):
    print("Schematic Undo and Redo tests - generate schematic events")
    # Initialise the test harness to give us a 'new' schematic
    sleep(delay)
    initialise_test_harness()
    # Create an initial event
    sleep(delay)
    p1 = create_left_hand_point()                         # event 1 #
    assert_objects_exist(p1)
    # Re-initialise the test harness to give us a 'new' schematic
    sleep(delay)
    initialise_test_harness()
    assert_objects_do_not_exist(p1)
    # Create a new chain of events
    sleep(delay)
    s1 = create_colour_light_signal()                     # event 1 #
    assert_objects_exist(s1)
    sleep(delay)
    assert_object_position(s1,75,50)
    select_and_move_objects(s1,100,100,delay=delay)       # event 2 #
    assert_object_position(s1,100,100)
    sleep(delay)
    l1 = create_line()                                    # event 3 #
    assert_objects_exist(l1)
    sleep(delay)
    assert_object_position(l1,75,50,125,50)
    select_and_move_objects(l1,500,150,delay=delay)       # event 4 #
    assert_object_position(l1,475,150,525,150)
    sleep(delay)
    select_and_move_line_end(l1,1,25,100,delay=delay)     # event 5 #
    assert_object_position(l1,25,100,525,150)
    sleep(delay)
    select_and_move_line_end(l1,2,550,100,delay=delay)    # event 6 #
    assert_object_position(l1,25,100,550,100)
    sleep(delay)
    select_single_object(s1)    
    sleep(delay)
    assert_object_configuration(s1,{"orientation":0})  
    rotate_selected_objects()                             # event 7 #
    assert_object_configuration(s1,{"orientation":180})  
    sleep(delay)
    copy_selected_objects()
    [s11] = paste_clipboard_objects()                     # event 8 #
    assert_objects_exist(s11)
    sleep(delay)
    delete_selected_objects()                             # event 9 #
    assert_objects_do_not_exist(s11)
    sleep(delay)
    assert_object_configuration(s1,{"itemid":1})  
    update_object_configuration(s1,{"itemid":2})          # event 10 #
    assert_object_configuration(s1,{"itemid":2})

    print("Schematic Undo and Redo tests - Undo schematic events")
    sleep(delay)
    assert_object_configuration(s1,{"itemid":2})
    undo()
    assert_object_configuration(s1,{"itemid":1})          # undo of event 10 #
    sleep(delay)
    assert_objects_do_not_exist(s11)                 
    undo()                                                # undo of event 9 #
    assert_objects_exist(s11)
    sleep(delay)
    undo()                                                # undo of event 8 #
    assert_objects_do_not_exist(s11)
    sleep(delay)
    assert_object_configuration(s1,{"orientation":180})
    undo()                                                # undo of event 7 #
    assert_object_configuration(s1,{"orientation":0})
    sleep(delay)
    assert_object_position(l1,25,100,550,100)
    undo()                                                # undo of event 6 #
    assert_object_position(l1,25,100,525,150)
    sleep(delay)
    assert_object_position(l1,25,100,525,150)
    undo()                                                # undo of event 5 #
    assert_object_position(l1,475,150,525,150)
    sleep(delay)
    undo()                                                # undo of event 4 #
    assert_object_position(l1,75,50,125,50)    
    sleep(delay)
    assert_objects_exist(l1)
    undo()                                                # undo of event 3 #
    assert_objects_do_not_exist(l1)    
    sleep(delay)
    assert_object_position(s1,100,100)
    undo()                                                # undo of event 2 #
    assert_object_position(s1,75,50)
    sleep(delay)
    assert_objects_exist(s1)
    undo()                                                # undo of event 1 #
    assert_objects_do_not_exist(s1)
    
    print("Schematic Undo and Redo tests - Start of buffer reached")
    # Test we can't go back any further
    undo()                                               
    assert_objects_do_not_exist(p1)
    undo()                                               
    assert_objects_do_not_exist(p1)
    undo()                                               
    assert_objects_do_not_exist(p1)
    undo()                                               
    assert_objects_do_not_exist(p1)
    
    print("Schematic Undo and Redo tests - Redo schematic events")
    sleep(delay)
    assert_objects_do_not_exist(s1)
    redo()
    assert_objects_exist(s1)
    sleep(delay)
    assert_object_position(s1,75,50)
    redo()
    assert_object_position(s1,100,100)
    sleep(delay)
    assert_objects_do_not_exist(l1)
    redo()
    assert_objects_exist(l1)
    sleep(delay)
    assert_object_position(l1,75,50,125,50)
    redo()
    assert_object_position(l1,475,150,525,150)
    sleep(delay)
    redo()
    assert_object_position(l1,25,100,525,150)
    sleep(delay)
    redo()
    assert_object_position(l1,25,100,550,100)
    sleep(delay)
    select_single_object(s1)    
    sleep(delay)
    assert_object_configuration(s1,{"orientation":0})  
    redo()
    assert_object_configuration(s1,{"orientation":180})  
    sleep(delay)
    copy_selected_objects()
    assert_objects_do_not_exist(s11)
    redo()
    assert_objects_exist(s11)
    sleep(delay)
    redo()
    assert_objects_do_not_exist(s11)
    sleep(delay)
    assert_object_configuration(s1,{"itemid":1})  
    redo()
    assert_object_configuration(s1,{"itemid":2})
    
    print("Schematic Undo and Redo tests - End of buffer reached")
    # Test we can't go forward any further
    redo()                                               
    redo()                                               
    redo()                                               
    redo()
    
    print("Schematic Undo and Redo tests - Reset buffer on new schematic event")
    # Undo a few schematic events and then create a new object
    sleep(delay)
    assert_object_configuration(s1,{"itemid":2})
    undo()                                                # undo of event 10 #
    assert_object_configuration(s1,{"itemid":1})
    sleep(delay)
    assert_objects_do_not_exist(s11)                 
    undo()                                                # undo of event 9 #
    assert_objects_exist(s11)
    sleep(delay)
    p1 = create_left_hand_point()                        
    # Test we can't go any further forward (end of buffer)
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    redo()                                               
    assert_objects_exist(s11)                 
    assert_object_configuration(s1,{"itemid":1})
    # one final undo
    sleep(delay)
    undo()
    assert_objects_do_not_exist(p1)
    # clean up
    sleep(delay)
    select_all_objects()
    sleep(delay)
    delete_selected_objects()
    return()

######################################################################################################

def run_all_schematic_editor_tests(delay:float=0.0, shutdown:bool=False):
    initialise_test_harness()
    set_edit_mode()
    run_basic_editor_tests(delay)
    run_object_edit_window_tests(delay)
    run_undo_and_redo_tests(delay)
    if shutdown: report_results()
    
if __name__ == "__main__":
    start_application(lambda:run_all_schematic_editor_tests(delay=0.0, shutdown=True))

###############################################################################################################################
    
