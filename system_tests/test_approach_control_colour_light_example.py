#-----------------------------------------------------------------------------------
# Test script for the approach_control_colour_light_example
#-----------------------------------------------------------------------------------

from system_test_harness import *
from test_common import *

#-----------------------------------------------------------------------------------

def run_initial_state_tests():
    print("Initial state tests")
    assert_signals_route_MAIN(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
    assert_signals_route_LH1(2)
    assert_signals_DANGER(1,2,3,4,5,6,7,8,12,13,14,15)
    assert_signals_CAUTION(9,16)
    assert_signals_PRELIM_CAUTION(17)
    assert_signals_PROCEED(10,11,18,19)
    assert_points_unlocked(2,3,5)
    assert_signals_unlocked(1,3,4,5,6,7,8,12,13,15)
    assert_subsidaries_unlocked(1,2,3)
    assert_signals_locked(2,14)
    assert_sections_clear(1,2,3,4,5,6,7,8,9,10,11,12,13)
    assert_signals_override_clear(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
    assert_signals_app_cntl_clear(1,2,3,4,8,9,10,11,12,16,17,18,19)
    return()

#-----------------------------------------------------------------------------------

def run_track_occupancy_tests():
    print("Track Occupancy Tests")
    # Signal 17
    assert_signals_override_clear(17)
    set_sections_occupied(5)
    assert_signals_override_set(17)
    set_sections_clear(5)
    assert_signals_override_clear(17)
    # Signal 16
    assert_signals_override_clear(16)
    set_sections_occupied(1)
    assert_signals_override_set(16)
    set_sections_clear(1)
    assert_signals_override_clear(16)
    # Signal 8
    assert_signals_override_clear(8)
    set_sections_occupied(2)
    assert_signals_override_set(8)
    set_sections_clear(2)
    assert_signals_override_clear(8)
    # Signal 1 - main route
    assert_signals_override_clear(1)
    set_sections_occupied(3)
    assert_signals_override_set(1)
    set_sections_clear(3)
    assert_signals_override_clear(1)
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    assert_signals_override_clear(1)
    set_sections_occupied(12)
    assert_signals_override_set(1)
    set_sections_clear(12)
    assert_signals_override_clear(1)
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    # Signal 3
    assert_signals_override_clear(3)
    set_sections_occupied(4)
    assert_signals_override_set(3)
    set_sections_clear(4)
    assert_signals_override_clear(3)
    # Signal 2
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    assert_signals_override_clear(2)
    set_sections_occupied(4)
    assert_signals_override_set(2)
    set_sections_clear(4)
    assert_signals_override_clear(2)
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    # Signal 9
    assert_signals_override_clear(9)
    set_sections_occupied(7)
    assert_signals_override_set(9)
    set_sections_clear(7)
    assert_signals_override_clear(9)
    # Signal 12
    assert_signals_override_clear(12)
    set_sections_occupied(8)
    assert_signals_override_set(12)
    set_sections_clear(8)
    assert_signals_override_clear(12)
    # Signal 10
    assert_signals_override_clear(10)
    set_sections_occupied(9)
    assert_signals_override_set(10)
    set_sections_clear(9)
    assert_signals_override_clear(10)
    # Signal 18
    assert_signals_override_clear(18)
    set_sections_occupied(14)
    assert_signals_override_set(18)
    set_sections_clear(14)
    assert_signals_override_clear(18)
    # Signal 19
    assert_signals_override_clear(19)
    set_sections_occupied(15)
    assert_signals_override_set(19)
    set_sections_clear(15)
    assert_signals_override_clear(19)
    return()

#-----------------------------------------------------------------------------------

def run_main_line_tests_1():
    print("Main line tests 1")
    # This clears all the signals and sends a train from Left to right along the main line
    sleep(1)
    set_signals_off(8,1,3,4)
    set_sections_occupied(10)
    assert_signals_PROCEED(17,16,8,1,3,4)
    assert_signals_route_MAIN(1)
    sleep(1)
    trigger_signals_passed(17)
    assert_signals_override_set(17)
    assert_sections_occupied(5)
    assert_sections_clear(10)
    assert_signals_DANGER(17)
    sleep(1)
    trigger_signals_passed(16)
    assert_signals_override_set(16)
    assert_sections_occupied(1)
    assert_sections_clear(5)
    assert_signals_DANGER(16)
    assert_signals_CAUTION(17)
    sleep(1)
    trigger_signals_passed(8)
    assert_signals_override_set(8)
    assert_sections_occupied(2)
    assert_sections_clear(1)
    assert_signals_DANGER(8)
    assert_signals_CAUTION(16)
    assert_signals_PRELIM_CAUTION(17)
    sleep(0.5)
    trigger_signals_released(1)
    sleep(0.5)
    trigger_signals_passed(1)
    assert_signals_override_set(1)
    assert_sections_occupied(3)
    assert_sections_clear(2)
    assert_signals_DANGER(1)
    assert_signals_CAUTION(8)
    assert_signals_PRELIM_CAUTION(16)
    assert_signals_PROCEED(17)
    sleep(0.5)
    trigger_signals_passed(15)
    sleep(0.5)
    trigger_signals_passed(3)
    assert_signals_override_set(3)
    assert_sections_occupied(4)
    assert_sections_clear(3)
    assert_signals_DANGER(3)
    assert_signals_CAUTION(1)
    assert_signals_PRELIM_CAUTION(8)
    assert_signals_PROCEED(16,17)
    sleep(0.5)
    trigger_signals_passed(13)
    sleep(0.5)
    trigger_signals_passed(4)
    assert_sections_clear(4)
    assert_signals_DANGER(4)
    assert_signals_CAUTION(3)
    assert_signals_PRELIM_CAUTION(1)
    assert_signals_PROCEED(8,16,17)
    sleep(1)
    # Revert the signals to danger
    set_signals_on(8,1,3,4)
    return()

#-----------------------------------------------------------------------------------

def run_main_line_tests_2():
    print("Main line tests 2")
    # This clears all the signals and sends a train from right to left along the main line
    sleep(1)
    set_signals_off(12)
    set_sections_occupied(6)
    assert_signals_PROCEED(9,12,10,18,19,11)
    sleep(1)
    trigger_signals_passed(9)
    assert_signals_override_set(9)
    assert_sections_occupied(7)
    assert_sections_clear(6)
    assert_signals_DANGER(9)
    sleep(1)
    trigger_signals_passed(12)
    assert_signals_override_set(12)
    assert_sections_occupied(8)
    assert_sections_clear(7)
    assert_signals_DANGER(12)
    assert_signals_CAUTION(9)
    sleep(0.5)
    trigger_signals_passed(14)
    sleep(0.5)
    trigger_signals_passed(10)
    assert_signals_override_set(10)
    assert_sections_occupied(9)
    assert_sections_clear(8)
    assert_signals_DANGER(10)
    assert_signals_CAUTION(12)
    assert_signals_PRELIM_CAUTION(9)
    sleep(1)
    trigger_signals_passed(18)
    assert_signals_override_set(18)
    assert_sections_occupied(14)
    assert_sections_clear(15)
    assert_signals_DANGER(18)
    assert_signals_CAUTION(10)
    assert_signals_PRELIM_CAUTION(12)
    assert_signals_PROCEED(9)
    sleep(1)
    trigger_signals_passed(19)
    assert_signals_override_set(19)
    assert_sections_occupied(15)
    assert_sections_clear(14)
    assert_signals_DANGER(19)
    assert_signals_CAUTION(18)
    assert_signals_PRELIM_CAUTION(10)
    assert_signals_PROCEED(12,9)
    sleep(1)
    trigger_signals_passed(11)
    assert_sections_clear(15)
    assert_signals_DANGER(11)
    assert_signals_CAUTION(19)
    assert_signals_PRELIM_CAUTION(18)
    assert_signals_PROCEED(10,12,9)
    sleep(1)
    # revert the signal to danger
    set_signals_on(12)
    return()

#-----------------------------------------------------------------------------------

def run_loop_line_tests():
    print("Loop line tests")
    # This clears all the signals and sends a train from right to left via the loop line
    # Note the loop line is subject to approach control (controlled via signal 1)
    sleep(1)
    # Change point 1 3 for the new route
    set_fpls_off(2,3)
    set_points_switched(2,3)
    set_fpls_on(2,3)
    # Clear the signals for the loop line
    sleep(1)
    set_signals_off(8,1,2,4)
    # Now feed in the first train
    sleep(1)
    set_sections_occupied(10)
    assert_signals_PROCEED(17,2)
    assert_signals_CAUTION_APP_CNTL(1)
    assert_signals_FLASH_CAUTION(8)
    assert_signals_FLASH_PRELIM_CAUTION(16)
    sleep(1)
    trigger_signals_passed(17)
    assert_signals_override_set(17)
    assert_sections_occupied(5)
    assert_sections_clear(10)
    assert_signals_DANGER(17)
    sleep(1)
    trigger_signals_passed(16)
    assert_signals_override_set(16)
    assert_sections_occupied(1)
    assert_sections_clear(5)
    assert_signals_DANGER(16)
    assert_signals_CAUTION(17)
    sleep(1)
    trigger_signals_passed(8)
    assert_signals_override_set(8)
    assert_sections_occupied(2)
    assert_sections_clear(1)
    assert_signals_DANGER(8)
    assert_signals_CAUTION(16)
    assert_signals_PRELIM_CAUTION(17)
    sleep(0.5)
    assert_signals_CAUTION_APP_CNTL(1)
    assert_signals_app_cntl_set(1)
    trigger_signals_released(1)
    assert_signals_app_cntl_clear(1)
    assert_signals_PROCEED(1)
    assert_signals_DANGER(8)
    assert_signals_CAUTION(16)
    assert_signals_PRELIM_CAUTION(17)
    sleep(0.5)
    trigger_signals_passed(1)
    assert_signals_app_cntl_set(1)
    assert_signals_override_set(1)
    assert_sections_occupied(12)
    assert_sections_clear(2)
    assert_signals_DANGER(1)
    assert_signals_CAUTION(8)
    assert_signals_PRELIM_CAUTION(16)
    assert_signals_PROCEED(17)
    sleep(0.5)
    trigger_signals_passed(6)
    sleep(0.5)
    trigger_signals_passed(2)
    assert_signals_override_set(2)
    assert_sections_occupied(4)
    assert_sections_clear(12)
    assert_signals_DANGER(2)
    assert_signals_CAUTION_APP_CNTL(1)
    assert_signals_FLASH_CAUTION(8)
    assert_signals_FLASH_PRELIM_CAUTION(16)
    assert_signals_PROCEED(17)
    sleep(0.5)
    trigger_signals_passed(13)
    sleep(0.5)
    trigger_signals_passed(4)
    assert_sections_clear(4)
    assert_signals_DANGER(4)
    assert_signals_CAUTION(2)
    assert_signals_CAUTION_APP_CNTL(1)
    assert_signals_FLASH_CAUTION(8)
    assert_signals_FLASH_PRELIM_CAUTION(16)
    sleep(1)
    # Revert the signals to danger
    set_signals_on(8,1,2,4)
    # Revert the points
    sleep(1)
    set_fpls_off(2,3)
    set_points_normal(2,3)
    set_fpls_on(2,3)
    return()

#-----------------------------------------------------------------------------------

def run_shunting_tests():
    print("Shunting tests")
    set_sections_occupied(4)
    sleep(1)
    # Test the crossover first
    set_points_switched(5)
    sleep(1)
    set_signals_off(13)
    sleep(1)
    trigger_signals_passed(13)
    assert_sections_occupied(8)
    assert_sections_clear(4)
    sleep(0.5)
    trigger_signals_passed(14)
    sleep(1)
    # Now go back the other way
    set_signals_on(13)
    set_signals_off(14)
    sleep(1)
    trigger_signals_passed(14)
    assert_sections_occupied(4)
    assert_sections_clear(8)
    sleep(0.5)
    trigger_signals_passed(13)
    sleep(0.5)
    set_signals_on(14)
    # Revert the points
    set_points_normal(5)
    sleep(1)
    # Now reverse down the main line
    set_signals_off(13,15)
    sleep(1)
    trigger_signals_passed(13)
    assert_sections_occupied(3)
    assert_sections_clear(4)
    sleep(0.5)
    trigger_signals_passed(3)
    sleep(0.5)
    trigger_signals_passed(15)
    assert_sections_occupied(2)
    assert_sections_clear(3)
    sleep(0.5)
    trigger_signals_passed(1)
    sleep(1)
    set_signals_on(13,15)
    # Move into the loop RH siding
    sleep(1)
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    sleep(1)
    set_subsidaries_off(1,2)
    sleep(1)
    trigger_signals_passed(1)
    assert_sections_occupied(12)
    assert_sections_clear(2)
    sleep(0.5)
    trigger_signals_passed(6)
    sleep(0.5)
    trigger_signals_passed(2)
    assert_sections_occupied(13)
    assert_sections_clear(12)
    sleep(0.5)
    trigger_signals_passed(7)
    sleep(1)
    set_subsidaries_on(1,2)
    sleep(1)
    # Set the route for the LH siding
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    sleep(1)
    set_signals_off(7,6)
    sleep(1)
    trigger_signals_passed(7)
    assert_sections_occupied(12)
    assert_sections_clear(13)
    sleep(0.5)
    trigger_signals_passed(2)
    sleep(0.5)
    trigger_signals_passed(6)
    assert_sections_occupied(11)
    assert_sections_clear(12)
    sleep(0.5)
    trigger_signals_passed(5)
    sleep(1)
    set_signals_on(7,6)
    # Now move out of the siding back onto the loop
    sleep(1)
    set_signals_off(5)
    sleep(1)
    trigger_signals_passed(5)
    assert_sections_occupied(12)
    assert_sections_clear(11)
    sleep(0.5)
    trigger_signals_passed(6)
    sleep(1)
    set_signals_on(5)
    sleep(1)
    # Reverse back onto the main line
    set_fpls_off(2)
    set_points_switched(2)
    set_fpls_on(2)
    sleep(1)
    set_signals_off(6)
    sleep(1)
    trigger_signals_passed(6)
    assert_sections_occupied(2)
    assert_sections_clear(12)
    sleep(0.5)
    trigger_signals_passed(1)
    sleep(1)
    set_signals_on(6)
    sleep(1)
    set_fpls_off(2)
    set_points_normal(2)
    set_fpls_on(2)
    sleep(1)
    # Now go forwards on the main line
    set_subsidaries_off(1,3)
    sleep(1)
    trigger_signals_passed(1)
    assert_sections_occupied(3)
    assert_sections_clear(2)
    sleep(0.5)
    trigger_signals_passed(15)
    sleep(0.5)
    trigger_signals_passed(3)
    assert_sections_occupied(4)
    assert_sections_clear(3)
    sleep(0.5)
    trigger_signals_passed(13)
    sleep(1)
    set_subsidaries_on(1,3)
    sleep(1)
    # Reverse back into the loop
    set_fpls_off(3)
    set_points_switched(3)
    set_fpls_on(3)
    sleep(1)
    set_signals_off(13)
    sleep(1)
    trigger_signals_passed(13)
    assert_sections_occupied(12)
    assert_sections_clear(4)
    sleep(0.5)
    trigger_signals_passed(2)
    sleep(1)
    set_signals_on(13)
    sleep(1)
    set_subsidaries_off(2)
    sleep(1)
    trigger_signals_passed(2)
    assert_sections_occupied(4)
    assert_sections_clear(12)
    sleep(0.5)
    trigger_signals_passed(13)
    sleep(1)
    set_subsidaries_on(2)
    sleep(1)
    # Revert the points to normal
    set_fpls_off(3)
    set_points_normal(3)
    set_fpls_on(3)
    sleep(1)
    # Finally clear the track occupancy
    set_sections_clear(4)
    return()

######################################################################################################

initialise_test_harness(filename="../configuration_examples/approach_control_colour_light_example.sig")
run_initial_state_tests()
run_signal_route_tests()
run_point_interlocking_tests()
run_signal_interlocking_tests()
run_track_occupancy_tests()
run_main_line_tests_1()
run_main_line_tests_2()
run_loop_line_tests()
run_shunting_tests()
complete_tests()
