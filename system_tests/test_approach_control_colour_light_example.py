from system_test_harness import *

initialise_test_harness(filename="../configuration_examples/approach_control_colour_light_example.sig")

#-----------------------------------------------------------------------------------

print("Initial state tests")

assert_signals_route_MAIN(1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
assert_signals_route_LH1(2)
assert_signals_DANGER(1,2,3,4,5,6,7,8,12,13,14,15)
assert_signals_CAUTION(9,16)
assert_signals_PRELIM_CAUTION(17)
assert_signals_PROCEED(10,11,18,19)
assert_points_unlocked(2,3,5)
assert_signals_unlocked(1,3,4,5,6,7,8,12,13,15)
assert_subsidaries_unlocked(1,2,3)
assert_signals_locked(2,14)
assert_sections_clear(1,2,3,4,5,6,7,8,9,10,11,12,13)
assert_signals_override_clear(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
assert_signals_app_cntl_clear(1,2,3,4,8,9,10,11,12,16,17,18,19)

#-----------------------------------------------------------------------------------

print("Signal Route tests")

# Signals 1 and 6
assert_signals_route_MAIN(1,6)
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
assert_signals_route_LH1(1,6)
set_fpls_off(2)
set_points_normal(2)
set_fpls_on(2)
assert_signals_route_MAIN(1,6)

# Signal 2, Signal 13 and Signal 14
# Note that for Signal 2, MAIN is for the main line and LH1 is the siding
# Note that for Signal 14, MAIN is for the crossover (no route back along main line)
assert_signals_route_LH1(2)
assert_signals_route_MAIN(13)
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
assert_signals_route_MAIN(2)
assert_signals_route_RH1(13)
set_points_switched(5)
assert_signals_route_MAIN(14)
assert_signals_route_LH1(13)
set_points_normal(5)
assert_signals_route_MAIN(2)
assert_signals_route_RH1(13)
set_fpls_off(3)
set_points_normal(3)
set_fpls_on(3)
assert_signals_route_LH1(2)
assert_signals_route_MAIN(13)

#-----------------------------------------------------------------------------------

print("Point Interlocking Tests")

# Point 2 - Test interlocking when normal
assert_signals_unlocked(1,5,6,15)
assert_subsidaries_unlocked(1)
set_fpls_off(2)
assert_signals_locked(1,5,6,15)
assert_subsidaries_locked(1)
set_fpls_on(2)
assert_signals_unlocked(1,5,6,15)
assert_subsidaries_unlocked(1)
# Point 2 - Test interlocking when switched
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
assert_signals_unlocked(1,6)
assert_signals_locked(5,15)
assert_subsidaries_unlocked(1)
# Point 2 - Test interlocking when returned to normal
set_fpls_off(2)
assert_signals_locked(1,5,6,15)
assert_subsidaries_locked(1)
set_points_normal(2)
set_fpls_on(2)
assert_signals_unlocked(1,5,6,15)
assert_subsidaries_unlocked(1)

# Point 3 - Test interlocking when normal
assert_signals_unlocked(3,7,13)
assert_subsidaries_unlocked(2,3)
assert_signals_locked(2)
set_fpls_off(3)
assert_signals_locked(2,3,7,13)
assert_subsidaries_locked(2,3)
set_fpls_on(3)
assert_signals_unlocked(3,7,13)
assert_subsidaries_unlocked(2,3)
assert_signals_locked(2)
# Test effect of Point 5 (different signals interlocked)
assert_signals_locked(14)
assert_signals_unlocked(12,3,13)
assert_subsidaries_unlocked(3)
set_points_switched(5)
assert_signals_locked(3,12)
assert_signals_unlocked(13,14)
assert_subsidaries_locked(3)
set_points_normal(5)
assert_signals_locked(14)
assert_signals_unlocked(12,3,13)
assert_subsidaries_unlocked(3)
# Point 3 - Test interlocking when switched
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
assert_signals_unlocked(2,13)
assert_signals_locked(3,7)
assert_subsidaries_unlocked(2)
assert_subsidaries_locked(3)
# Test effect of Point 5 (different signals interlocked)
assert_signals_locked(14)
assert_signals_unlocked(12,2,13)
assert_subsidaries_unlocked(2)
set_points_switched(5)
assert_signals_locked(2,12)
assert_signals_unlocked(13,14)
assert_subsidaries_locked(2)
set_points_normal(5)
assert_signals_locked(14)
assert_signals_unlocked(12,2,13)
assert_subsidaries_unlocked(2)
# Point 2 - Test interlocking when returned to normal
set_fpls_off(3)
assert_signals_locked(2,3,7,13)
assert_subsidaries_locked(2,3)
set_points_normal(3)
set_fpls_on(3)
assert_signals_unlocked(3,7,13)
assert_signals_locked(2)
assert_subsidaries_unlocked(2,3)

# Point 3 - Test interlocking when normal
assert_signals_unlocked(3,13,12)
assert_signals_locked(14)
assert_subsidaries_unlocked(3)
# Point 3 - Test interlocking when switched
set_points_switched(5)
assert_signals_unlocked(13,14)
assert_signals_locked(3,12)
assert_subsidaries_locked(3)
# Point 2 - Test interlocking when returned to normal
set_points_normal(5)
assert_signals_unlocked(3,13,12)
assert_signals_locked(14)
assert_subsidaries_unlocked(3)

#-----------------------------------------------------------------------------------

print("Signal Interlocking Tests")

# Test signal 8 interlocking
set_signals_off(8)
assert_signals_locked(15)
set_signals_on(8)
assert_signals_unlocked(15)
# Test effect of point 2 (different signals interlocked)
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
set_signals_off(8)
assert_signals_locked(6)
set_signals_on(8)
assert_signals_unlocked(6)
# Return point 2 to normal
set_fpls_off(2)
set_points_normal(2)
set_fpls_on(2)

# Test signal 1 interlocking - main line
set_signals_off(1)
assert_signals_locked(13,15)
assert_subsidaries_locked(1)
assert_points_locked(2)
set_signals_on(1)
assert_signals_unlocked(13,15)
assert_subsidaries_unlocked(1)
assert_points_unlocked(1)
set_subsidaries_off(1)
assert_signals_locked(1,13,15)
assert_points_locked(2)
set_subsidaries_on(1)
assert_signals_unlocked(1,13,15)
assert_points_unlocked(1)
# Test signals 1 interlocking on loop line
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
set_signals_off(1)
assert_signals_locked(6,7)
assert_points_locked(2)
set_signals_on(1)
set_subsidaries_off(1)
assert_signals_locked(6,7)
assert_points_locked(2)
set_subsidaries_on(1)
assert_signals_unlocked(6,7)
assert_points_unlocked(1)
# Test effect of point 3 (different interlocked signals)
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
set_signals_off(1)
assert_signals_locked(6,13)
set_signals_on(1)
assert_signals_unlocked(6,13)
set_subsidaries_off(1)
assert_signals_locked(6,13)
set_subsidaries_on(1)
assert_signals_unlocked(6,13)
assert_points_unlocked(1)
# Set Points 2 and 3 back to their default states
set_fpls_off(3)
set_points_normal(3)
set_fpls_on(3)
set_fpls_off(2)
set_points_normal(2)
set_fpls_on(2)

# Test signal 15 interlocking
set_signals_off(15)
assert_signals_locked(1,8)
assert_subsidaries_locked(1)
assert_points_locked(2)
set_signals_on(15)
assert_signals_unlocked(1,8)
assert_subsidaries_unlocked(1)
assert_points_unlocked(2)

# Test Signal 3 interlocking
set_signals_off(3)
assert_signals_locked(13)
assert_subsidaries_locked(3)
assert_points_locked(3,5)
set_signals_on(3)
assert_signals_unlocked(13)
assert_subsidaries_unlocked(3)
assert_points_unlocked(2)
set_subsidaries_off(3)
assert_signals_locked(13,3)
assert_points_locked(3,5)
set_subsidaries_on(3)
assert_signals_unlocked(13,3)
assert_points_unlocked(3,5)

# Test Signal 13 interlocking for MAIN route
set_signals_off(13)
assert_signals_locked(1,3)
assert_subsidaries_locked(1,3)
assert_points_locked(3,5)
set_signals_on(13)
assert_signals_unlocked(1,3)
assert_subsidaries_unlocked(1,3)
assert_points_unlocked(3,5)
# Test Signal 13 interlocking for LH1 route
set_points_switched(5)
set_signals_off(13)
assert_signals_locked(14)
assert_points_locked(5)
set_signals_on(13)
assert_signals_unlocked(14)
assert_points_unlocked(5)
set_points_normal(5)
# Test Signal 13 interlocking for RH1 route
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
set_signals_off(13)
assert_signals_locked(2,5)
assert_subsidaries_locked(2)
assert_points_locked(3,5)
set_signals_on(13)
assert_signals_unlocked(2,5)
assert_subsidaries_unlocked(2)
assert_points_unlocked(3,5)
# Test effect of point 2 (different interlocked signals)
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
set_signals_off(13)
assert_signals_locked(2,1)
assert_subsidaries_locked(2,1)
assert_points_locked(3,5)
set_signals_on(13)
assert_signals_unlocked(2,1)
assert_subsidaries_unlocked(2,1)
assert_points_unlocked(3,5)
# Set Points 2 and 3 back to their default states
set_fpls_off(3)
set_points_normal(3)
set_fpls_on(3)
set_fpls_off(2)
set_points_normal(2)
set_fpls_on(2)

# Test Signal 5 interlocking
set_signals_off(5)
assert_signals_locked(6,7)
assert_points_locked(2)
set_signals_on(5)
assert_signals_unlocked(6,7)
assert_points_unlocked(2)
# Test effect of point 3 (different interlocked signals)
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
set_signals_off(5)
assert_signals_locked(6,13)
assert_points_locked(2)
set_signals_on(5)
assert_signals_unlocked(6,13)
assert_points_unlocked(2)
# Set Point 3 back to its default state
set_fpls_off(3)
set_points_normal(3)
set_fpls_on(3)

# Test Signal 6 interlocking
set_signals_off(6)
assert_signals_locked(5)
assert_points_locked(2)
set_signals_on(6)
assert_signals_unlocked(5)
assert_points_unlocked(2)
# Test effect of point 2 (different interlocked signals)
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
set_signals_off(6)
assert_signals_locked(1,8)
assert_subsidaries_locked(1)
assert_points_locked(2)
set_signals_on(6)
assert_signals_unlocked(1,8)
assert_subsidaries_unlocked(1)
assert_points_unlocked(2)
# Set Point 2 back to its default state
set_fpls_off(2)
set_points_normal(2)
set_fpls_on(2)

# Test signal 7 interlocking
# Note that signal 2 is always locked when point 3 is normal
set_signals_off(7)
assert_signals_locked(2,5)
assert_subsidaries_locked(2)
assert_points_locked(3)
set_signals_on(7)
assert_signals_locked(2)
assert_signals_unlocked(5)
assert_subsidaries_unlocked(1)
assert_points_unlocked(3)
# Test effect of point 2 (different interlocked signals)
# Note that signal 2 should always be locked unless route is set for MAIN
set_fpls_off(2)
set_points_switched(2)
set_fpls_on(2)
set_signals_off(7)
assert_signals_locked(2,1)
assert_subsidaries_locked(2,1)
assert_points_locked(3)
set_signals_on(7)
assert_signals_locked(2)
assert_signals_unlocked(1)
assert_subsidaries_unlocked(2,1)
assert_points_unlocked(3)
# Set Point 2 back to its default state
set_fpls_off(2)
set_points_normal(2)
set_fpls_on(2)

# Test Signal 2 interlocking
# Note that main signal is only for the MAIN route (not the siding)
assert_signals_locked(2)
set_subsidaries_off(2)
assert_signals_locked(7)
assert_points_locked(3)
set_subsidaries_on(2)
assert_signals_unlocked(7)
assert_points_unlocked(3)
# Test Signal 2 interlocking for LH1 route
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
set_signals_off(2)
assert_signals_locked(13)
assert_points_locked(3)
set_signals_on(2)
assert_signals_unlocked(13)
assert_points_unlocked(3)
set_subsidaries_off(2)
assert_signals_locked(13)
assert_points_locked(3)
set_subsidaries_on(2)
assert_signals_unlocked(13)
assert_points_unlocked(3)
# Set Point 3 back to its default state
set_fpls_off(3)
set_points_normal(3)
set_fpls_on(3)

# Test Signal 12 interlocking
# Note that signal 14 should always be locked for this test
set_signals_off(12)
assert_signals_locked(14)
assert_points_locked(5)
set_signals_on(12)
assert_signals_locked(14)
assert_points_unlocked(5)

# Test Signal 14 interlocking
# Note this can only be cleared for the crossover
assert_signals_locked(14)
set_points_switched(5)
set_signals_off(14)
assert_signals_locked(13)
assert_points_locked(5)
set_signals_on(14)
assert_signals_unlocked(13)
assert_points_unlocked(5)
set_points_normal(5)

#-----------------------------------------------------------------------------------

print("Signal Override Tests")

assert_signals_override_clear(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)
set_sections_occupied(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
assert_signals_override_set(1,3,8,9,10,12,16,17,18,19)
assert_signals_override_clear(2,4,5,6,7,11,13,14,15)
set_fpls_off(3)
set_points_switched(3)
set_fpls_on(3)
assert_signals_override_set(1,2,8,9,10,12,16,17,18,19)
assert_signals_override_clear(4,5,6,7,11,13,14,15)
set_fpls_off(3)
set_points_normal(3)
set_fpls_on(3)
set_sections_clear(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15)
assert_signals_override_clear(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19)

#-----------------------------------------------------------------------------------


complete_tests()

print("Main line tests 1")

sleep(30)







# This clears all the signals and sends a train from Left to right along the main line
print("Main line tests 1")
sleep(1)
set_signals_off(8,1,3,4)
set_sections_occupied(10)
assert_points_locked(2,3,5)
assert_signals_locked(15,13)
assert_subsidaries_locked(1)
assert_signals_PROCEED(17,16,8,1,3,4)
assert_signals_route_MAIN(1)
sleep(1)
trigger_signals_passed(17)
assert_signals_override_set(17)
assert_sections_occupied(5)
assert_sections_clear(10)
assert_signals_DANGER(17)
sleep(1)
trigger_signals_passed(16)
assert_signals_override_set(16)
assert_sections_occupied(1)
assert_sections_clear(5)
assert_signals_DANGER(16)
assert_signals_CAUTION(17)
sleep(1)
trigger_signals_passed(8)
assert_signals_override_set(8)
assert_sections_occupied(2)
assert_sections_clear(1)
assert_signals_DANGER(8)
assert_signals_CAUTION(16)
assert_signals_PRELIM_CAUTION(17)
sleep(0.5)
trigger_signals_released(1)
sleep(0.5)
trigger_signals_passed(1)
assert_signals_override_set(1)
assert_sections_occupied(3)
assert_sections_clear(2)
assert_signals_DANGER(1)
assert_signals_CAUTION(8)
assert_signals_PRELIM_CAUTION(16)
assert_signals_PROCEED(17)
sleep(0.5)
trigger_signals_passed(15)
sleep(0.5)
trigger_signals_passed(3)
assert_signals_override_set(3)
assert_sections_occupied(4)
assert_sections_clear(3)
assert_signals_DANGER(3)
assert_signals_CAUTION(1)
assert_signals_PRELIM_CAUTION(8)
assert_signals_PROCEED(16,17)
sleep(0.5)
trigger_signals_passed(13)
sleep(0.5)
trigger_signals_passed(4)
assert_sections_clear(4)
assert_signals_DANGER(4)
assert_signals_CAUTION(3)
assert_signals_PRELIM_CAUTION(1)
assert_signals_PROCEED(8,16,17)

# This clears all the signals and sends a train from right to left along the main line
print("Main line tests 2")
sleep(1)
set_signals_off(12)
set_sections_occupied(6)
assert_points_locked(5)
assert_signals_locked(14)
assert_signals_PROCEED(9,12,10,18,19,11)
sleep(1)
trigger_signals_passed(9)
assert_signals_override_set(9)
assert_sections_occupied(7)
assert_sections_clear(6)
assert_signals_DANGER(9)
sleep(1)
trigger_signals_passed(12)
assert_signals_override_set(12)
assert_sections_occupied(8)
assert_sections_clear(7)
assert_signals_DANGER(12)
assert_signals_CAUTION(9)
sleep(0.5)
trigger_signals_passed(14)
sleep(0.5)
trigger_signals_passed(10)
assert_signals_override_set(10)
assert_sections_occupied(9)
assert_sections_clear(8)
assert_signals_DANGER(10)
assert_signals_CAUTION(12)
assert_signals_PRELIM_CAUTION(9)
sleep(1)
trigger_signals_passed(18)
assert_signals_override_set(18)
assert_sections_occupied(14)
assert_sections_clear(15)
assert_signals_DANGER(18)
assert_signals_CAUTION(10)
assert_signals_PRELIM_CAUTION(12)
assert_signals_PROCEED(9)
sleep(1)
trigger_signals_passed(19)
assert_signals_override_set(19)
assert_sections_occupied(15)
assert_sections_clear(14)
assert_signals_DANGER(19)
assert_signals_CAUTION(18)
assert_signals_PRELIM_CAUTION(10)
assert_signals_PROCEED(12,9)
sleep(1)
trigger_signals_passed(11)
assert_sections_clear(15)
assert_signals_DANGER(11)
assert_signals_CAUTION(19)
assert_signals_PRELIM_CAUTION(18)
assert_signals_PROCEED(10,12,9)

# This clears all the signals and sends a train from right to left via the loop line
# Note the loop line is subject to approach control (controlled via signal 1)
print("Loop line tests")

# Change point 1 and clear signal 1 for the new route
sleep(1)
set_signals_on(1)
sleep(1)
assert_points_unlocked(2)
set_fpls_off(2)
assert_signals_locked(1,15,6,5)
assert_subsidaries_locked(1)
set_points_switched (2)
set_fpls_on(2)
assert_signals_unlocked(1)
assert_signals_locked(5,15)
assert_subsidaries_unlocked(1)
sleep(1)
set_signals_off(1)
assert_signals_route_LH1(1)
assert_signals_locked(6,7)
assert_subsidaries_locked(1)
assert_signals_app_cntl_set(1)
# Change point 3 and clear signal 2 for the new route
sleep(1)
set_signals_on(3)
sleep(1)
assert_points_unlocked(3)
set_fpls_off(3)
assert_signals_locked(2,3,7,13)
assert_subsidaries_locked(2,3)
set_points_switched (3)
set_fpls_on(3)
assert_signals_unlocked(2)
assert_signals_locked(7,3)
assert_subsidaries_unlocked(2)
assert_subsidaries_locked(3)
sleep(1)
set_signals_off(2)
assert_signals_route_MAIN(2)
assert_signals_locked(6,7)
assert_subsidaries_locked(1)
sleep(1)
# Now feed in the first train
set_sections_occupied(10)
assert_points_locked(2,3,5)
assert_signals_locked(3,5,6,7,15,13,14)
assert_subsidaries_locked(3)
assert_signals_PROCEED(17,2)
assert_signals_CAUTION_APP_CNTL(1)
assert_signals_FLASH_CAUTION(8)
assert_signals_FLASH_PRELIM_CAUTION(16)
sleep(1)
trigger_signals_passed(17)
assert_signals_override_set(17)
assert_sections_occupied(5)
assert_sections_clear(10)
assert_signals_DANGER(17)
sleep(1)
trigger_signals_passed(16)
assert_signals_override_set(16)
assert_sections_occupied(1)
assert_sections_clear(5)
assert_signals_DANGER(16)
assert_signals_CAUTION(17)
sleep(1)
trigger_signals_passed(8)
assert_signals_override_set(8)
assert_sections_occupied(2)
assert_sections_clear(1)
assert_signals_DANGER(8)
assert_signals_CAUTION(16)
assert_signals_PRELIM_CAUTION(17)
sleep(0.5)
assert_signals_CAUTION_APP_CNTL(1)
assert_signals_app_cntl_set(1)
trigger_signals_released(1)
assert_signals_app_cntl_clear(1)
assert_signals_PROCEED(1)
assert_signals_DANGER(8)
assert_signals_CAUTION(16)
assert_signals_PRELIM_CAUTION(17)
sleep(0.5)
trigger_signals_passed(1)
assert_signals_app_cntl_set(1)
assert_signals_override_set(1)
assert_sections_occupied(12)
assert_sections_clear(2)
assert_signals_DANGER(1)
assert_signals_CAUTION(8)
assert_signals_PRELIM_CAUTION(16)
assert_signals_PROCEED(17)
sleep(0.5)
trigger_signals_passed(6)
sleep(0.5)
trigger_signals_passed(2)
assert_signals_override_set(2)
assert_sections_occupied(4)
assert_sections_clear(12)
assert_signals_DANGER(2)
assert_signals_CAUTION_APP_CNTL(1)
assert_signals_FLASH_CAUTION(8)
assert_signals_FLASH_PRELIM_CAUTION(16)
assert_signals_PROCEED(17)
sleep(0.5)
trigger_signals_passed(13)
sleep(0.5)
trigger_signals_passed(4)
assert_sections_clear(4)
assert_signals_DANGER(4)
assert_signals_CAUTION(2)
assert_signals_CAUTION_APP_CNTL(1)
assert_signals_FLASH_CAUTION(8)
assert_signals_FLASH_PRELIM_CAUTION(16)
assert_signals_PROCEED(17)

complete_tests()
