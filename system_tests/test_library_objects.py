#-----------------------------------------------------------------------------------
# System tests to check the basic display and function of all library object permutations
#-----------------------------------------------------------------------------------

from system_test_harness import *
from model_railway_signals.library import signals
from model_railway_signals.library import signals_common
import test_object_edit_windows

def test_basic_point_operation(delay:float=0.0):
    # The sig file was saved with all points switched (and locked)
    print("Running basic point switching tests")
    assert_points_switched(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
    sleep(delay)
    set_fpls_off(5,6,7,8,13,15,16,19)
    sleep(delay)
    set_points_normal(1,2,3,4,5,6,7,8,13,14,15,16,17,18,19,20)
    sleep(delay)
    set_fpls_on(5,6,7,8,13,15,16,19)
    assert_points_normal(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
    sleep(delay)
    set_fpls_off(5,6,7,8,13,15,16,19)
    sleep(delay)
    set_points_switched(1,2,3,4,5,6,7,8,13,14,15,16,17,18,19,20)
    sleep(delay)
    set_fpls_on(5,6,7,8,13,15,16,19)
    assert_points_switched(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)
    return()

def test_basic_section_operation(delay:float=0.0):
    # The sig file was saved with all sections occupied
    print("Running basic section switching tests")
    assert_sections_occupied(1,2,3,4)
    assert_section_label(1,"ABC")
    assert_section_label(2,"DEF")
    assert_section_label(3,"ABC")
    assert_section_label(4,"DEF")
    sleep(delay)
    toggle_sections(1,2)
    assert_sections_clear(1,2,3,4)
    sleep(delay)
    toggle_sections(1,2)
    assert_sections_occupied(1,2,3,4)
    return()

def test_basic_instrument_operation(delay:float=0.0):
    # The sig file was saved with instrument 1,3 OCCUPIED and 4 CLEAR
    # Instrument 1 is linked to 3 and Instrument 2 is linked to 4
    print("Running basic single line instrument switching tests")
    assert_block_section_ahead_not_clear(1,3)
    sleep(delay)
    set_instrument_clear(1)
    assert_block_section_ahead_clear(3)
    assert_block_section_ahead_not_clear(1)
    sleep(delay)
    set_instrument_blocked(1)
    assert_block_section_ahead_not_clear(1,3)
    sleep(delay)
    set_instrument_occupied(3)
    assert_block_section_ahead_not_clear(1,3)
    sleep(delay)
    set_instrument_clear(3)
    assert_block_section_ahead_clear(1)
    assert_block_section_ahead_not_clear(3)
    sleep(delay)
    set_instrument_blocked(3)
    assert_block_section_ahead_not_clear(1,3)
    sleep(delay)
    set_instrument_occupied(1)
    assert_block_section_ahead_not_clear(1,3)
    print("Running basic double line instrument switching tests")
    assert_block_section_ahead_clear(2)
    assert_block_section_ahead_not_clear(4)
    sleep(delay)
    set_instrument_clear(2)
    assert_block_section_ahead_clear(2,4)
    sleep(delay)
    set_instrument_blocked(2)
    assert_block_section_ahead_not_clear(4)
    assert_block_section_ahead_clear(2)
    sleep(delay)
    set_instrument_occupied(2)
    assert_block_section_ahead_not_clear(4)
    assert_block_section_ahead_clear(2)
    sleep(delay)
    set_instrument_blocked(4)
    assert_block_section_ahead_not_clear(2,4)
    sleep(delay)
    set_instrument_occupied(4)
    assert_block_section_ahead_not_clear(2,4)
    sleep(delay)
    set_instrument_clear(4)
    assert_block_section_ahead_not_clear(4)
    assert_block_section_ahead_clear(2)
    return()
    
def test_basic_colour_light_operation(delay:float=0.0):
    # The sig file was saved with all colour light signals off
    print("Running basic colour light signal switching tests")
    assert_signals_PROCEED(1,2,4,5,6,7,8,10,11,12,14,15,16,17,33,18,20,21,22,23,24,34,26,27,29,30,31,32,33,34,67,69)
    assert_signals_CAUTION(3,9,13,19,25,28,68,70)
    sleep(delay)
    set_signals_on(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,67,68,69,70)
    assert_signals_DANGER(1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,21,22,23,24,25,26,27,28,29,30,31,32,33,34,67,68,69,70)
    assert_signals_CAUTION(4,20)
    sleep(delay)
    set_signals_off(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,67,68,69,70)
    assert_signals_PROCEED(1,2,4,5,6,7,8,10,11,12,14,15,16,17,33,18,20,21,22,23,24,34,26,27,29,30,31,32,33,34,67,69)
    assert_signals_CAUTION(3,9,13,19,25,28,68,70)
    return()

def test_basic_semaphore_operation(delay:float=0.0):
    # The sig file was saved with all Semaphore signals off (secondary distant arms are on)
    # MAIN route indications (We need to cheat to set the route)
    shunt_signals = (40,41,27,33)
    MAIN_dist_arms_only = (36,71,72,73,74,75,76,4,24,3,67,69,16,6)
    MAIN_home_arms_only = (35,45,65,52,64,60,66,70,10,68,18,9,11,21,42,17)
    MAIN_home_and_sub_arms = (37,50,51,53,54,55,56,20,15,29,13,31,5,8,77,78)
    MAIN_home_and_dist_arms = (39,59,61,58,62,57,63,1,2,32,7,25,12,19,79,80)
    MAIN_home_dist_and_sub_arms = (38,43,44,46,47,48,49,34,30,22,14,26,23,28,81,82)
    MAIN_all_signals = (MAIN_dist_arms_only + MAIN_home_arms_only + MAIN_home_and_sub_arms +
                   MAIN_home_and_dist_arms + MAIN_home_dist_and_sub_arms + shunt_signals)
    route = list(signals_common.route_type)[1]
    print("Running basic semaphore signal switching tests for route: "+str(route))
    for sig_id in MAIN_all_signals: signals.set_route (sig_id, list(signals_common.route_type)[1],"M")
    # Tests start here
    assert_signals_PROCEED(*MAIN_dist_arms_only)
    assert_signals_PROCEED(*MAIN_home_arms_only)
    assert_signals_PROCEED(*MAIN_home_and_sub_arms)
    assert_signals_PROCEED(*shunt_signals)
    assert_signals_CAUTION(*MAIN_home_and_dist_arms)
    assert_signals_CAUTION(*MAIN_home_dist_and_sub_arms)
    sleep(delay)
    set_secondary_dists_off(*MAIN_home_and_dist_arms)
    set_secondary_dists_off(*MAIN_home_dist_and_sub_arms)
    assert_signals_PROCEED(*MAIN_home_and_dist_arms)
    assert_signals_PROCEED(*MAIN_home_dist_and_sub_arms)
    sleep(delay)
    set_signals_on(*MAIN_all_signals)
    assert_signals_CAUTION(*MAIN_dist_arms_only)
    assert_signals_DANGER(*MAIN_home_arms_only)
    assert_signals_DANGER(*MAIN_home_and_sub_arms)
    assert_signals_DANGER(*shunt_signals)
    assert_signals_DANGER(*MAIN_home_and_dist_arms)
    assert_signals_DANGER(*MAIN_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_off(*MAIN_home_and_sub_arms)
    set_subsidaries_off(*MAIN_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_on(*MAIN_home_and_sub_arms)
    set_subsidaries_on(*MAIN_home_dist_and_sub_arms)
    # No asserts to make for the above but at least it exercises the code
    sleep(delay)
    set_secondary_dists_on(*MAIN_home_and_dist_arms)
    set_secondary_dists_on(*MAIN_home_dist_and_sub_arms)
    set_signals_off(*MAIN_all_signals)
    # LH1 route indications (We need to cheat to set the route)
    LH1_dist_arms_only = (71,72,75,76,24,3,16,6)
    LH1_home_arms_only = (45,65,60,66,10,68,11,21,17,42)
    LH1_home_and_sub_arms = (50,51,55,56,15,29,5,8,77,78)
    LH1_home_and_dist_arms = (59,61,57,63,2,32,12,19,79,80)
    LH1_home_dist_and_sub_arms = (43,44,48,49,30,22,23,28,81,82)
    LH1_all_signals = (LH1_dist_arms_only + LH1_home_arms_only + LH1_home_and_sub_arms +
                   LH1_home_and_dist_arms + LH1_home_dist_and_sub_arms + shunt_signals)
    route = list(signals_common.route_type)[2]
    print("Running basic semaphore signal switching tests for route: "+str(route))
    for sig_id in LH1_all_signals: signals.set_route (sig_id, list(signals_common.route_type)[2],"1")
    # Tests start here
    assert_signals_PROCEED(*LH1_dist_arms_only)
    assert_signals_PROCEED(*LH1_home_arms_only)
    assert_signals_PROCEED(*LH1_home_and_sub_arms)
    assert_signals_PROCEED(*shunt_signals)
    assert_signals_CAUTION(*LH1_home_and_dist_arms)
    assert_signals_CAUTION(*LH1_home_dist_and_sub_arms)
    sleep(delay)
    set_secondary_dists_off(*LH1_home_and_dist_arms)
    set_secondary_dists_off(*LH1_home_dist_and_sub_arms)
    assert_signals_PROCEED(*LH1_home_and_dist_arms)
    assert_signals_PROCEED(*LH1_home_dist_and_sub_arms)
    sleep(delay)
    set_signals_on(*LH1_all_signals)
    assert_signals_CAUTION(*LH1_dist_arms_only)
    assert_signals_DANGER(*LH1_home_arms_only)
    assert_signals_DANGER(*LH1_home_and_sub_arms)
    assert_signals_DANGER(*shunt_signals)
    assert_signals_DANGER(*LH1_home_and_dist_arms)
    assert_signals_DANGER(*LH1_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_off(*LH1_home_and_sub_arms)
    set_subsidaries_off(*LH1_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_on(*LH1_home_and_sub_arms)
    set_subsidaries_on(*LH1_home_dist_and_sub_arms)
    # No asserts to make for the above but at least it exercises the code
    sleep(delay)
    set_secondary_dists_on(*LH1_home_and_dist_arms)
    set_secondary_dists_on(*LH1_home_dist_and_sub_arms)
    set_signals_off(*LH1_all_signals)
    # LH2 route indications (We need to cheat to set the route)
    LH2_dist_arms_only = (72,76,3,6)
    LH2_home_arms_only = (65,66,68,21,17,42)
    LH2_home_and_sub_arms = (51,56,29,8,77,78)
    LH2_home_and_dist_arms = (61,63,32,19,79,80)
    LH2_home_dist_and_sub_arms = (44,49,22,28,81,82)
    LH2_all_signals = (LH2_dist_arms_only + LH2_home_arms_only + LH2_home_and_sub_arms +
                   LH2_home_and_dist_arms + LH2_home_dist_and_sub_arms + shunt_signals)
    route = list(signals_common.route_type)[3]
    print("Running basic semaphore signal switching tests for route: "+str(route))
    for sig_id in LH2_all_signals: signals.set_route (sig_id, list(signals_common.route_type)[3],"2")    
    # Tests start here
    assert_signals_PROCEED(*LH2_dist_arms_only)
    assert_signals_PROCEED(*LH2_home_arms_only)
    assert_signals_PROCEED(*LH2_home_and_sub_arms)
    assert_signals_PROCEED(*shunt_signals)
    assert_signals_CAUTION(*LH2_home_and_dist_arms)
    assert_signals_CAUTION(*LH2_home_dist_and_sub_arms)
    sleep(delay)
    set_secondary_dists_off(*LH2_home_and_dist_arms)
    set_secondary_dists_off(*LH2_home_dist_and_sub_arms)
    assert_signals_PROCEED(*LH2_home_and_dist_arms)
    assert_signals_PROCEED(*LH2_home_dist_and_sub_arms)
    sleep(delay)
    set_signals_on(*LH2_all_signals)
    assert_signals_CAUTION(*LH2_dist_arms_only)
    assert_signals_DANGER(*LH2_home_arms_only)
    assert_signals_DANGER(*LH2_home_and_sub_arms)
    assert_signals_DANGER(*shunt_signals)
    assert_signals_DANGER(*LH2_home_and_dist_arms)
    assert_signals_DANGER(*LH2_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_off(*LH2_home_and_sub_arms)
    set_subsidaries_off(*LH2_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_on(*LH2_home_and_sub_arms)
    set_subsidaries_on(*LH2_home_dist_and_sub_arms)
    # No asserts to make for the above but at least it exercises the code
    sleep(delay)
    set_secondary_dists_on(*LH2_home_and_dist_arms)
    set_secondary_dists_on(*LH2_home_dist_and_sub_arms)
    set_signals_off(*LH2_all_signals)
    # RH1 route indications (We need to cheat to set the route)
    RH1_dist_arms_only = (73,74,75,76,67,69,16,6)
    RH1_home_arms_only = (52,64,60,66,18,9,11,21,17,42)
    RH1_home_and_sub_arms = (53,54,55,56,13,31,5,8,77,78)
    RH1_home_and_dist_arms = (58,62,57,63,7,25,12,19,79,80)
    RH1_home_dist_and_sub_arms = (46,47,48,49,14,26,23,28,81,82)
    RH1_all_signals = (RH1_dist_arms_only + RH1_home_arms_only + RH1_home_and_sub_arms +
                   RH1_home_and_dist_arms + RH1_home_dist_and_sub_arms + shunt_signals)
    route = list(signals_common.route_type)[4]
    print("Running basic semaphore signal switching tests for route: "+str(route))
    for sig_id in RH1_all_signals: signals.set_route (sig_id, list(signals_common.route_type)[4],"3")    
    # Tests start here
    assert_signals_PROCEED(*RH1_dist_arms_only)
    assert_signals_PROCEED(*RH1_home_arms_only)
    assert_signals_PROCEED(*RH1_home_and_sub_arms)
    assert_signals_PROCEED(*shunt_signals)
    assert_signals_CAUTION(*RH1_home_and_dist_arms)
    assert_signals_CAUTION(*RH1_home_dist_and_sub_arms)
    sleep(delay)
    set_secondary_dists_off(*RH1_home_and_dist_arms)
    set_secondary_dists_off(*RH1_home_dist_and_sub_arms)
    assert_signals_PROCEED(*RH1_home_and_dist_arms)
    assert_signals_PROCEED(*RH1_home_dist_and_sub_arms)
    sleep(delay)
    set_signals_on(*RH1_all_signals)
    assert_signals_CAUTION(*RH1_dist_arms_only)
    assert_signals_DANGER(*RH1_home_arms_only)
    assert_signals_DANGER(*RH1_home_and_sub_arms)
    assert_signals_DANGER(*shunt_signals)
    assert_signals_DANGER(*RH1_home_and_dist_arms)
    assert_signals_DANGER(*RH1_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_off(*RH1_home_and_sub_arms)
    set_subsidaries_off(*RH1_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_on(*RH1_home_and_sub_arms)
    set_subsidaries_on(*RH1_home_dist_and_sub_arms)
    # No asserts to make for the above but at least it exercises the code
    sleep(delay)
    set_secondary_dists_on(*RH1_home_and_dist_arms)
    set_secondary_dists_on(*RH1_home_dist_and_sub_arms)
    set_signals_off(*RH1_all_signals)
    # RH2 route indications (We need to cheat to set the route)
    RH2_dist_arms_only = (74,76,69,6)
    RH2_home_arms_only = (64,66,9,21,17,42)
    RH2_home_and_sub_arms = (54,56,31,8,77,78)
    RH2_home_and_dist_arms = (62,63,25,19,79,80)
    RH2_home_dist_and_sub_arms = (47,49,26,28,81,82)
    RH2_all_signals = (RH2_dist_arms_only + RH2_home_arms_only + RH2_home_and_sub_arms +
                   RH2_home_and_dist_arms + RH2_home_dist_and_sub_arms + shunt_signals)
    route = list(signals_common.route_type)[5]
    print("Running basic semaphore signal switching tests for route: "+str(route))
    for sig_id in RH2_all_signals: signals.set_route (sig_id, list(signals_common.route_type)[5],"4")    
    # Tests start here
    assert_signals_PROCEED(*RH2_dist_arms_only)
    assert_signals_PROCEED(*RH2_home_arms_only)
    assert_signals_PROCEED(*RH2_home_and_sub_arms)
    assert_signals_PROCEED(*shunt_signals)
    assert_signals_CAUTION(*RH2_home_and_dist_arms)
    assert_signals_CAUTION(*RH2_home_dist_and_sub_arms)
    sleep(delay)
    set_secondary_dists_off(*RH2_home_and_dist_arms)
    set_secondary_dists_off(*RH2_home_dist_and_sub_arms)
    assert_signals_PROCEED(*RH2_home_and_dist_arms)
    assert_signals_PROCEED(*RH2_home_dist_and_sub_arms)
    sleep(delay)
    set_signals_on(*RH2_all_signals)
    assert_signals_CAUTION(*RH2_dist_arms_only)
    assert_signals_DANGER(*RH2_home_arms_only)
    assert_signals_DANGER(*RH2_home_and_sub_arms)
    assert_signals_DANGER(*shunt_signals)
    assert_signals_DANGER(*RH2_home_and_dist_arms)
    assert_signals_DANGER(*RH2_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_off(*RH2_home_and_sub_arms)
    set_subsidaries_off(*RH2_home_dist_and_sub_arms)
    sleep(delay)
    set_subsidaries_on(*RH2_home_and_sub_arms)
    set_subsidaries_on(*RH2_home_dist_and_sub_arms)
    # No asserts to make for the above but at least it exercises the code
    sleep(delay)
    set_secondary_dists_on(*RH2_home_and_dist_arms)
    set_secondary_dists_on(*RH2_home_dist_and_sub_arms)
    set_signals_off(*RH2_all_signals)
    return()

######################################################################################################

def run_all_basic_library_tests(delay:float=0.0, shutdown:bool=False):
    initialise_test_harness(filename="./test_library_objects1.sig")
    # basic_library_tests1.sig was saved in edit mode
    set_run_mode()
    test_basic_point_operation(delay)
    test_basic_section_operation(delay)
    test_basic_instrument_operation(delay)
    test_basic_colour_light_operation(delay)
    ### TO DO - colour light route indications
    ### TO DO - colour light subsidaries
    ### TO DO - colour light timed sequences
    ### TO DO - colour light override to DANGER
    ### TO DO - colour light override to CAUTION
    ### TO DO - colour light release on yellow
    ### TO DO - colour light release on red
    set_edit_mode()
    test_object_edit_windows.test_all_object_edit_windows(delay)
    initialise_test_harness(filename="./test_library_objects2.sig")
    # basic_library_tests1.sig was saved in edit mode
    set_run_mode()
    test_basic_semaphore_operation(delay)
    ### TO DO - home signals with just subsidary arms
    ### TO DO - Load with some subsidaries clear (with different routes set)
    ### TO DO - Load with some signals clear (with different routes set)
    ### TO DO - semaphore timed sequences
    ### TO DO - semaphore override to DANGER
    ### TO DO - semaphore override to CAUTION
    ### TO DO - semaphore update distant on home signal ahead
    ### TO DO - semaphore release on red
    set_edit_mode()
    test_object_edit_windows.test_all_object_edit_windows(delay)
    if shutdown: report_results()
    
if __name__ == "__main__":
    start_application(lambda:run_all_basic_library_tests(delay=0.0, shutdown=True))

###############################################################################################################################
    
